=begin
#Gitea API.

#This documentation describes the Gitea API.

The version of the OpenAPI document: {{AppVer | JSEscape | Safe}}

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.4.0

=end

require 'spec_helper'
require 'json'

# Unit tests for GiteaRubyClient::OrganizationApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'OrganizationApi' do
  before do
    # run before each test
    @api_instance = GiteaRubyClient::OrganizationApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of OrganizationApi' do
    it 'should create an instance of OrganizationApi' do
      expect(@api_instance).to be_instance_of(GiteaRubyClient::OrganizationApi)
    end
  end

  # unit tests for create_org_repo
  # Create a repository in an organization
  # @param org name of organization
  # @param [Hash] opts the optional parameters
  # @option opts [CreateRepoOption] :body 
  # @return [Repository]
  describe 'create_org_repo test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_org_repo_deprecated
  # Create a repository in an organization
  # @param org name of organization
  # @param [Hash] opts the optional parameters
  # @option opts [CreateRepoOption] :body 
  # @return [Repository]
  describe 'create_org_repo_deprecated test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for org_add_team_member
  # Add a team member
  # @param id id of the team
  # @param username username of the user to add
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'org_add_team_member test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for org_add_team_repository
  # Add a repository to a team
  # @param id id of the team
  # @param org organization that owns the repo to add
  # @param repo name of the repo to add
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'org_add_team_repository test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for org_conceal_member
  # Conceal a user&#39;s membership
  # @param org name of the organization
  # @param username username of the user
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'org_conceal_member test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for org_create
  # Create an organization
  # @param organization 
  # @param [Hash] opts the optional parameters
  # @return [Organization]
  describe 'org_create test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for org_create_hook
  # Create a hook
  # @param org name of the organization
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [Hook]
  describe 'org_create_hook test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for org_create_label
  # Create a label for an organization
  # @param org name of the organization
  # @param [Hash] opts the optional parameters
  # @option opts [CreateLabelOption] :body 
  # @return [Label]
  describe 'org_create_label test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for org_create_team
  # Create a team
  # @param org name of the organization
  # @param [Hash] opts the optional parameters
  # @option opts [CreateTeamOption] :body 
  # @return [Team]
  describe 'org_create_team test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for org_delete
  # Delete an organization
  # @param org organization that is to be deleted
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'org_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for org_delete_hook
  # Delete a hook
  # @param org name of the organization
  # @param id id of the hook to delete
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'org_delete_hook test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for org_delete_label
  # Delete a label
  # @param org name of the organization
  # @param id id of the label to delete
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'org_delete_label test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for org_delete_member
  # Remove a member from an organization
  # @param org name of the organization
  # @param username username of the user
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'org_delete_member test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for org_delete_team
  # Delete a team
  # @param id id of the team to delete
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'org_delete_team test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for org_edit
  # Edit an organization
  # @param org name of the organization to edit
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [Organization]
  describe 'org_edit test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for org_edit_hook
  # Update a hook
  # @param org name of the organization
  # @param id id of the hook to update
  # @param [Hash] opts the optional parameters
  # @option opts [EditHookOption] :body 
  # @return [Hook]
  describe 'org_edit_hook test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for org_edit_label
  # Update a label
  # @param org name of the organization
  # @param id id of the label to edit
  # @param [Hash] opts the optional parameters
  # @option opts [EditLabelOption] :body 
  # @return [Label]
  describe 'org_edit_label test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for org_edit_team
  # Edit a team
  # @param id id of the team to edit
  # @param [Hash] opts the optional parameters
  # @option opts [EditTeamOption] :body 
  # @return [Team]
  describe 'org_edit_team test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for org_get
  # Get an organization
  # @param org name of the organization to get
  # @param [Hash] opts the optional parameters
  # @return [Organization]
  describe 'org_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for org_get_all
  # Get list of organizations
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page page number of results to return (1-based)
  # @option opts [Integer] :limit page size of results
  # @return [Array<Organization>]
  describe 'org_get_all test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for org_get_hook
  # Get a hook
  # @param org name of the organization
  # @param id id of the hook to get
  # @param [Hash] opts the optional parameters
  # @return [Hook]
  describe 'org_get_hook test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for org_get_label
  # Get a single label
  # @param org name of the organization
  # @param id id of the label to get
  # @param [Hash] opts the optional parameters
  # @return [Label]
  describe 'org_get_label test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for org_get_team
  # Get a team
  # @param id id of the team to get
  # @param [Hash] opts the optional parameters
  # @return [Team]
  describe 'org_get_team test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for org_get_user_permissions
  # Get user permissions in organization
  # @param username username of user
  # @param org name of the organization
  # @param [Hash] opts the optional parameters
  # @return [OrganizationPermissions]
  describe 'org_get_user_permissions test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for org_is_member
  # Check if a user is a member of an organization
  # @param org name of the organization
  # @param username username of the user
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'org_is_member test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for org_is_public_member
  # Check if a user is a public member of an organization
  # @param org name of the organization
  # @param username username of the user
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'org_is_public_member test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for org_list_current_user_orgs
  # List the current user&#39;s organizations
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page page number of results to return (1-based)
  # @option opts [Integer] :limit page size of results
  # @return [Array<Organization>]
  describe 'org_list_current_user_orgs test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for org_list_hooks
  # List an organization&#39;s webhooks
  # @param org name of the organization
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page page number of results to return (1-based)
  # @option opts [Integer] :limit page size of results
  # @return [Array<Hook>]
  describe 'org_list_hooks test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for org_list_labels
  # List an organization&#39;s labels
  # @param org name of the organization
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page page number of results to return (1-based)
  # @option opts [Integer] :limit page size of results
  # @return [Array<Label>]
  describe 'org_list_labels test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for org_list_members
  # List an organization&#39;s members
  # @param org name of the organization
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page page number of results to return (1-based)
  # @option opts [Integer] :limit page size of results
  # @return [Array<User>]
  describe 'org_list_members test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for org_list_public_members
  # List an organization&#39;s public members
  # @param org name of the organization
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page page number of results to return (1-based)
  # @option opts [Integer] :limit page size of results
  # @return [Array<User>]
  describe 'org_list_public_members test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for org_list_repos
  # List an organization&#39;s repos
  # @param org name of the organization
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page page number of results to return (1-based)
  # @option opts [Integer] :limit page size of results
  # @return [Array<Repository>]
  describe 'org_list_repos test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for org_list_team_member
  # List a particular member of team
  # @param id id of the team
  # @param username username of the member to list
  # @param [Hash] opts the optional parameters
  # @return [User]
  describe 'org_list_team_member test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for org_list_team_members
  # List a team&#39;s members
  # @param id id of the team
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page page number of results to return (1-based)
  # @option opts [Integer] :limit page size of results
  # @return [Array<User>]
  describe 'org_list_team_members test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for org_list_team_repos
  # List a team&#39;s repos
  # @param id id of the team
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page page number of results to return (1-based)
  # @option opts [Integer] :limit page size of results
  # @return [Array<Repository>]
  describe 'org_list_team_repos test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for org_list_teams
  # List an organization&#39;s teams
  # @param org name of the organization
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page page number of results to return (1-based)
  # @option opts [Integer] :limit page size of results
  # @return [Array<Team>]
  describe 'org_list_teams test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for org_list_user_orgs
  # List a user&#39;s organizations
  # @param username username of user
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page page number of results to return (1-based)
  # @option opts [Integer] :limit page size of results
  # @return [Array<Organization>]
  describe 'org_list_user_orgs test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for org_publicize_member
  # Publicize a user&#39;s membership
  # @param org name of the organization
  # @param username username of the user
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'org_publicize_member test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for org_remove_team_member
  # Remove a team member
  # @param id id of the team
  # @param username username of the user to remove
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'org_remove_team_member test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for org_remove_team_repository
  # Remove a repository from a team
  # This does not delete the repository, it only removes the repository from the team.
  # @param id id of the team
  # @param org organization that owns the repo to remove
  # @param repo name of the repo to remove
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'org_remove_team_repository test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for team_search
  # Search for teams within an organization
  # @param org name of the organization
  # @param [Hash] opts the optional parameters
  # @option opts [String] :q keywords to search
  # @option opts [Boolean] :include_desc include search within team description (defaults to true)
  # @option opts [Integer] :page page number of results to return (1-based)
  # @option opts [Integer] :limit page size of results
  # @return [InlineResponse200]
  describe 'team_search test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
