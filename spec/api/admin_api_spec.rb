=begin
#Gitea API.

#This documentation describes the Gitea API.

The version of the OpenAPI document: {{AppVer | JSEscape | Safe}}

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.4.0

=end

require 'spec_helper'
require 'json'

# Unit tests for GiteaRubyClient::AdminApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'AdminApi' do
  before do
    # run before each test
    @api_instance = GiteaRubyClient::AdminApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of AdminApi' do
    it 'should create an instance of AdminApi' do
      expect(@api_instance).to be_instance_of(GiteaRubyClient::AdminApi)
    end
  end

  # unit tests for admin_adopt_repository
  # Adopt unadopted files as a repository
  # @param owner owner of the repo
  # @param repo name of the repo
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'admin_adopt_repository test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for admin_create_org
  # Create an organization
  # @param username username of the user that will own the created organization
  # @param organization 
  # @param [Hash] opts the optional parameters
  # @return [Organization]
  describe 'admin_create_org test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for admin_create_public_key
  # Add a public key on behalf of a user
  # @param username username of the user
  # @param [Hash] opts the optional parameters
  # @option opts [CreateKeyOption] :key 
  # @return [PublicKey]
  describe 'admin_create_public_key test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for admin_create_repo
  # Create a repository on behalf of a user
  # @param username username of the user. This user will own the created repository
  # @param repository 
  # @param [Hash] opts the optional parameters
  # @return [Repository]
  describe 'admin_create_repo test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for admin_create_user
  # Create a user
  # @param [Hash] opts the optional parameters
  # @option opts [CreateUserOption] :body 
  # @return [User]
  describe 'admin_create_user test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for admin_cron_list
  # List cron tasks
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page page number of results to return (1-based)
  # @option opts [Integer] :limit page size of results
  # @return [Array<Cron>]
  describe 'admin_cron_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for admin_cron_run
  # Run cron task
  # @param task task to run
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'admin_cron_run test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for admin_delete_unadopted_repository
  # Delete unadopted files
  # @param owner owner of the repo
  # @param repo name of the repo
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'admin_delete_unadopted_repository test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for admin_delete_user
  # Delete a user
  # @param username username of user to delete
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'admin_delete_user test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for admin_delete_user_public_key
  # Delete a user&#39;s public key
  # @param username username of user
  # @param id id of the key to delete
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'admin_delete_user_public_key test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for admin_edit_user
  # Edit an existing user
  # @param username username of user to edit
  # @param [Hash] opts the optional parameters
  # @option opts [EditUserOption] :body 
  # @return [User]
  describe 'admin_edit_user test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for admin_get_all_orgs
  # List all organizations
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page page number of results to return (1-based)
  # @option opts [Integer] :limit page size of results
  # @return [Array<Organization>]
  describe 'admin_get_all_orgs test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for admin_get_all_users
  # List all users
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page page number of results to return (1-based)
  # @option opts [Integer] :limit page size of results
  # @return [Array<User>]
  describe 'admin_get_all_users test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for admin_unadopted_list
  # List unadopted repositories
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page page number of results to return (1-based)
  # @option opts [Integer] :limit page size of results
  # @option opts [String] :pattern pattern of repositories to search for
  # @return [Array<String>]
  describe 'admin_unadopted_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
