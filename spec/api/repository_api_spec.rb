=begin
#Gitea API.

#This documentation describes the Gitea API.

The version of the OpenAPI document: {{AppVer | JSEscape | Safe}}

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.4.0

=end

require 'spec_helper'
require 'json'

# Unit tests for GiteaRubyClient::RepositoryApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'RepositoryApi' do
  before do
    # run before each test
    @api_instance = GiteaRubyClient::RepositoryApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of RepositoryApi' do
    it 'should create an instance of RepositoryApi' do
      expect(@api_instance).to be_instance_of(GiteaRubyClient::RepositoryApi)
    end
  end

  # unit tests for accept_repo_transfer
  # Accept a repo transfer
  # @param owner owner of the repo to transfer
  # @param repo name of the repo to transfer
  # @param [Hash] opts the optional parameters
  # @return [Repository]
  describe 'accept_repo_transfer test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_current_user_repo
  # Create a repository
  # @param [Hash] opts the optional parameters
  # @option opts [CreateRepoOption] :body 
  # @return [Repository]
  describe 'create_current_user_repo test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_fork
  # Fork a repository
  # @param owner owner of the repo to fork
  # @param repo name of the repo to fork
  # @param [Hash] opts the optional parameters
  # @option opts [CreateForkOption] :body 
  # @return [Repository]
  describe 'create_fork test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for generate_repo
  # Create a repository using a template
  # @param template_owner name of the template repository owner
  # @param template_repo name of the template repository
  # @param [Hash] opts the optional parameters
  # @option opts [GenerateRepoOption] :body 
  # @return [Repository]
  describe 'generate_repo test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_annotated_tag
  # Gets the tag object of an annotated tag (not lightweight tags)
  # @param owner owner of the repo
  # @param repo name of the repo
  # @param sha sha of the tag. The Git tags API only supports annotated tag objects, not lightweight tags.
  # @param [Hash] opts the optional parameters
  # @return [AnnotatedTag]
  describe 'get_annotated_tag test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_blob
  # Gets the blob of a repository.
  # @param owner owner of the repo
  # @param repo name of the repo
  # @param sha sha of the commit
  # @param [Hash] opts the optional parameters
  # @return [GitBlobResponse]
  describe 'get_blob test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_tree
  # Gets the tree of a repository.
  # @param owner owner of the repo
  # @param repo name of the repo
  # @param sha sha of the commit
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :recursive show all directories and files
  # @option opts [Integer] :page page number; the &#39;truncated&#39; field in the response will be true if there are still more items after this page, false if the last page
  # @option opts [Integer] :per_page number of items per page
  # @return [GitTreeResponse]
  describe 'get_tree test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_forks
  # List a repository&#39;s forks
  # @param owner owner of the repo
  # @param repo name of the repo
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page page number of results to return (1-based)
  # @option opts [Integer] :limit page size of results
  # @return [Array<Repository>]
  describe 'list_forks test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for reject_repo_transfer
  # Reject a repo transfer
  # @param owner owner of the repo to transfer
  # @param repo name of the repo to transfer
  # @param [Hash] opts the optional parameters
  # @return [Repository]
  describe 'reject_repo_transfer test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repo_add_collaborator
  # Add a collaborator to a repository
  # @param owner owner of the repo
  # @param repo name of the repo
  # @param collaborator username of the collaborator to add
  # @param [Hash] opts the optional parameters
  # @option opts [AddCollaboratorOption] :body 
  # @return [nil]
  describe 'repo_add_collaborator test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repo_add_team
  # Add a team to a repository
  # @param owner owner of the repo
  # @param repo name of the repo
  # @param team team name
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'repo_add_team test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repo_add_topic
  # Add a topic to a repository
  # @param owner owner of the repo
  # @param repo name of the repo
  # @param topic name of the topic to add
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'repo_add_topic test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repo_apply_diff_patch
  # Apply diff patch to repository
  # @param owner owner of the repo
  # @param repo name of the repo
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [FileResponse]
  describe 'repo_apply_diff_patch test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repo_check_collaborator
  # Check if a user is a collaborator of a repository
  # @param owner owner of the repo
  # @param repo name of the repo
  # @param collaborator username of the collaborator
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'repo_check_collaborator test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repo_check_team
  # Check if a team is assigned to a repository
  # @param owner owner of the repo
  # @param repo name of the repo
  # @param team team name
  # @param [Hash] opts the optional parameters
  # @return [Team]
  describe 'repo_check_team test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repo_create_branch
  # Create a branch
  # @param owner owner of the repo
  # @param repo name of the repo
  # @param [Hash] opts the optional parameters
  # @option opts [CreateBranchRepoOption] :body 
  # @return [Branch]
  describe 'repo_create_branch test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repo_create_branch_protection
  # Create a branch protections for a repository
  # @param owner owner of the repo
  # @param repo name of the repo
  # @param [Hash] opts the optional parameters
  # @option opts [CreateBranchProtectionOption] :body 
  # @return [BranchProtection]
  describe 'repo_create_branch_protection test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repo_create_file
  # Create a file in a repository
  # @param owner owner of the repo
  # @param repo name of the repo
  # @param filepath path of the file to create
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [FileResponse]
  describe 'repo_create_file test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repo_create_hook
  # Create a hook
  # @param owner owner of the repo
  # @param repo name of the repo
  # @param [Hash] opts the optional parameters
  # @option opts [CreateHookOption] :body 
  # @return [Hook]
  describe 'repo_create_hook test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repo_create_key
  # Add a key to a repository
  # @param owner owner of the repo
  # @param repo name of the repo
  # @param [Hash] opts the optional parameters
  # @option opts [CreateKeyOption] :body 
  # @return [DeployKey]
  describe 'repo_create_key test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repo_create_pull_request
  # Create a pull request
  # @param owner owner of the repo
  # @param repo name of the repo
  # @param [Hash] opts the optional parameters
  # @option opts [CreatePullRequestOption] :body 
  # @return [PullRequest]
  describe 'repo_create_pull_request test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repo_create_pull_review
  # Create a review to an pull request
  # @param owner owner of the repo
  # @param repo name of the repo
  # @param index index of the pull request
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [PullReview]
  describe 'repo_create_pull_review test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repo_create_pull_review_requests
  # create review requests for a pull request
  # @param owner owner of the repo
  # @param repo name of the repo
  # @param index index of the pull request
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [Array<PullReview>]
  describe 'repo_create_pull_review_requests test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repo_create_release
  # Create a release
  # @param owner owner of the repo
  # @param repo name of the repo
  # @param [Hash] opts the optional parameters
  # @option opts [CreateReleaseOption] :body 
  # @return [Release]
  describe 'repo_create_release test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repo_create_release_attachment
  # Create a release attachment
  # @param owner owner of the repo
  # @param repo name of the repo
  # @param id id of the release
  # @param attachment attachment to upload
  # @param [Hash] opts the optional parameters
  # @option opts [String] :name name of the attachment
  # @return [Attachment]
  describe 'repo_create_release_attachment test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repo_create_status
  # Create a commit status
  # @param owner owner of the repo
  # @param repo name of the repo
  # @param sha sha of the commit
  # @param [Hash] opts the optional parameters
  # @option opts [CreateStatusOption] :body 
  # @return [CommitStatus]
  describe 'repo_create_status test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repo_create_tag
  # Create a new git tag in a repository
  # @param owner owner of the repo
  # @param repo name of the repo
  # @param [Hash] opts the optional parameters
  # @option opts [CreateTagOption] :body 
  # @return [Tag]
  describe 'repo_create_tag test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repo_create_wiki_page
  # Create a wiki page
  # @param owner owner of the repo
  # @param repo name of the repo
  # @param [Hash] opts the optional parameters
  # @option opts [CreateWikiPageOptions] :body 
  # @return [WikiPage]
  describe 'repo_create_wiki_page test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repo_delete
  # Delete a repository
  # @param owner owner of the repo to delete
  # @param repo name of the repo to delete
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'repo_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repo_delete_branch
  # Delete a specific branch from a repository
  # @param owner owner of the repo
  # @param repo name of the repo
  # @param branch branch to delete
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'repo_delete_branch test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repo_delete_branch_protection
  # Delete a specific branch protection for the repository
  # @param owner owner of the repo
  # @param repo name of the repo
  # @param name name of protected branch
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'repo_delete_branch_protection test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repo_delete_collaborator
  # Delete a collaborator from a repository
  # @param owner owner of the repo
  # @param repo name of the repo
  # @param collaborator username of the collaborator to delete
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'repo_delete_collaborator test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repo_delete_file
  # Delete a file in a repository
  # @param owner owner of the repo
  # @param repo name of the repo
  # @param filepath path of the file to delete
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [FileDeleteResponse]
  describe 'repo_delete_file test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repo_delete_git_hook
  # Delete a Git hook in a repository
  # @param owner owner of the repo
  # @param repo name of the repo
  # @param id id of the hook to get
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'repo_delete_git_hook test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repo_delete_hook
  # Delete a hook in a repository
  # @param owner owner of the repo
  # @param repo name of the repo
  # @param id id of the hook to delete
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'repo_delete_hook test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repo_delete_key
  # Delete a key from a repository
  # @param owner owner of the repo
  # @param repo name of the repo
  # @param id id of the key to delete
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'repo_delete_key test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repo_delete_pull_review
  # Delete a specific review from a pull request
  # @param owner owner of the repo
  # @param repo name of the repo
  # @param index index of the pull request
  # @param id id of the review
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'repo_delete_pull_review test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repo_delete_pull_review_requests
  # cancel review requests for a pull request
  # @param owner owner of the repo
  # @param repo name of the repo
  # @param index index of the pull request
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'repo_delete_pull_review_requests test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repo_delete_release
  # Delete a release
  # @param owner owner of the repo
  # @param repo name of the repo
  # @param id id of the release to delete
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'repo_delete_release test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repo_delete_release_attachment
  # Delete a release attachment
  # @param owner owner of the repo
  # @param repo name of the repo
  # @param id id of the release
  # @param attachment_id id of the attachment to delete
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'repo_delete_release_attachment test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repo_delete_release_by_tag
  # Delete a release by tag name
  # @param owner owner of the repo
  # @param repo name of the repo
  # @param tag tag name of the release to delete
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'repo_delete_release_by_tag test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repo_delete_tag
  # Delete a repository&#39;s tag by name
  # @param owner owner of the repo
  # @param repo name of the repo
  # @param tag name of tag to delete
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'repo_delete_tag test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repo_delete_team
  # Delete a team from a repository
  # @param owner owner of the repo
  # @param repo name of the repo
  # @param team team name
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'repo_delete_team test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repo_delete_topic
  # Delete a topic from a repository
  # @param owner owner of the repo
  # @param repo name of the repo
  # @param topic name of the topic to delete
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'repo_delete_topic test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repo_delete_wiki_page
  # Delete a wiki page
  # @param owner owner of the repo
  # @param repo name of the repo
  # @param page_name name of the page
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'repo_delete_wiki_page test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repo_dismiss_pull_review
  # Dismiss a review for a pull request
  # @param owner owner of the repo
  # @param repo name of the repo
  # @param index index of the pull request
  # @param id id of the review
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [PullReview]
  describe 'repo_dismiss_pull_review test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repo_download_commit_diff_or_patch
  # Get a commit&#39;s diff or patch
  # @param owner owner of the repo
  # @param repo name of the repo
  # @param sha SHA of the commit to get
  # @param diff_type whether the output is diff or patch
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'repo_download_commit_diff_or_patch test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repo_download_pull_diff_or_patch
  # Get a pull request diff or patch
  # @param owner owner of the repo
  # @param repo name of the repo
  # @param index index of the pull request to get
  # @param diff_type whether the output is diff or patch
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :binary whether to include binary file changes. if true, the diff is applicable with &#x60;git apply&#x60;
  # @return [String]
  describe 'repo_download_pull_diff_or_patch test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repo_edit
  # Edit a repository&#39;s properties. Only fields that are set will be changed.
  # @param owner owner of the repo to edit
  # @param repo name of the repo to edit
  # @param [Hash] opts the optional parameters
  # @option opts [EditRepoOption] :body Properties of a repo that you can edit
  # @return [Repository]
  describe 'repo_edit test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repo_edit_branch_protection
  # Edit a branch protections for a repository. Only fields that are set will be changed
  # @param owner owner of the repo
  # @param repo name of the repo
  # @param name name of protected branch
  # @param [Hash] opts the optional parameters
  # @option opts [EditBranchProtectionOption] :body 
  # @return [BranchProtection]
  describe 'repo_edit_branch_protection test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repo_edit_git_hook
  # Edit a Git hook in a repository
  # @param owner owner of the repo
  # @param repo name of the repo
  # @param id id of the hook to get
  # @param [Hash] opts the optional parameters
  # @option opts [EditGitHookOption] :body 
  # @return [GitHook]
  describe 'repo_edit_git_hook test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repo_edit_hook
  # Edit a hook in a repository
  # @param owner owner of the repo
  # @param repo name of the repo
  # @param id index of the hook
  # @param [Hash] opts the optional parameters
  # @option opts [EditHookOption] :body 
  # @return [Hook]
  describe 'repo_edit_hook test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repo_edit_pull_request
  # Update a pull request. If using deadline only the date will be taken into account, and time of day ignored.
  # @param owner owner of the repo
  # @param repo name of the repo
  # @param index index of the pull request to edit
  # @param [Hash] opts the optional parameters
  # @option opts [EditPullRequestOption] :body 
  # @return [PullRequest]
  describe 'repo_edit_pull_request test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repo_edit_release
  # Update a release
  # @param owner owner of the repo
  # @param repo name of the repo
  # @param id id of the release to edit
  # @param [Hash] opts the optional parameters
  # @option opts [EditReleaseOption] :body 
  # @return [Release]
  describe 'repo_edit_release test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repo_edit_release_attachment
  # Edit a release attachment
  # @param owner owner of the repo
  # @param repo name of the repo
  # @param id id of the release
  # @param attachment_id id of the attachment to edit
  # @param [Hash] opts the optional parameters
  # @option opts [EditAttachmentOptions] :body 
  # @return [Attachment]
  describe 'repo_edit_release_attachment test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repo_edit_wiki_page
  # Edit a wiki page
  # @param owner owner of the repo
  # @param repo name of the repo
  # @param page_name name of the page
  # @param [Hash] opts the optional parameters
  # @option opts [CreateWikiPageOptions] :body 
  # @return [WikiPage]
  describe 'repo_edit_wiki_page test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repo_get
  # Get a repository
  # @param owner owner of the repo
  # @param repo name of the repo
  # @param [Hash] opts the optional parameters
  # @return [Repository]
  describe 'repo_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repo_get_all_commits
  # Get a list of all commits from a repository
  # @param owner owner of the repo
  # @param repo name of the repo
  # @param [Hash] opts the optional parameters
  # @option opts [String] :sha SHA or branch to start listing commits from (usually &#39;master&#39;)
  # @option opts [String] :path filepath of a file/dir
  # @option opts [Integer] :page page number of results to return (1-based)
  # @option opts [Integer] :limit page size of results (ignored if used with &#39;path&#39;)
  # @return [Array<Commit>]
  describe 'repo_get_all_commits test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repo_get_archive
  # Get an archive of a repository
  # @param owner owner of the repo
  # @param repo name of the repo
  # @param archive the git reference for download with attached archive format (e.g. master.zip)
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'repo_get_archive test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repo_get_assignees
  # Return all users that have write access and can be assigned to issues
  # @param owner owner of the repo
  # @param repo name of the repo
  # @param [Hash] opts the optional parameters
  # @return [Array<User>]
  describe 'repo_get_assignees test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repo_get_branch
  # Retrieve a specific branch from a repository, including its effective branch protection
  # @param owner owner of the repo
  # @param repo name of the repo
  # @param branch branch to get
  # @param [Hash] opts the optional parameters
  # @return [Branch]
  describe 'repo_get_branch test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repo_get_branch_protection
  # Get a specific branch protection for the repository
  # @param owner owner of the repo
  # @param repo name of the repo
  # @param name name of protected branch
  # @param [Hash] opts the optional parameters
  # @return [BranchProtection]
  describe 'repo_get_branch_protection test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repo_get_by_id
  # Get a repository by id
  # @param id id of the repo to get
  # @param [Hash] opts the optional parameters
  # @return [Repository]
  describe 'repo_get_by_id test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repo_get_combined_status_by_ref
  # Get a commit&#39;s combined status, by branch/tag/commit reference
  # @param owner owner of the repo
  # @param repo name of the repo
  # @param ref name of branch/tag/commit
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page page number of results to return (1-based)
  # @option opts [Integer] :limit page size of results
  # @return [CombinedStatus]
  describe 'repo_get_combined_status_by_ref test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repo_get_contents
  # Gets the metadata and contents (if a file) of an entry in a repository, or a list of entries if a dir
  # @param owner owner of the repo
  # @param repo name of the repo
  # @param filepath path of the dir, file, symlink or submodule in the repo
  # @param [Hash] opts the optional parameters
  # @option opts [String] :ref The name of the commit/branch/tag. Default the repository’s default branch (usually master)
  # @return [ContentsResponse]
  describe 'repo_get_contents test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repo_get_contents_list
  # Gets the metadata of all the entries of the root dir
  # @param owner owner of the repo
  # @param repo name of the repo
  # @param [Hash] opts the optional parameters
  # @option opts [String] :ref The name of the commit/branch/tag. Default the repository’s default branch (usually master)
  # @return [Array<ContentsResponse>]
  describe 'repo_get_contents_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repo_get_editor_config
  # Get the EditorConfig definitions of a file in a repository
  # @param owner owner of the repo
  # @param repo name of the repo
  # @param filepath filepath of file to get
  # @param [Hash] opts the optional parameters
  # @option opts [String] :ref The name of the commit/branch/tag. Default the repository’s default branch (usually master)
  # @return [nil]
  describe 'repo_get_editor_config test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repo_get_git_hook
  # Get a Git hook
  # @param owner owner of the repo
  # @param repo name of the repo
  # @param id id of the hook to get
  # @param [Hash] opts the optional parameters
  # @return [GitHook]
  describe 'repo_get_git_hook test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repo_get_hook
  # Get a hook
  # @param owner owner of the repo
  # @param repo name of the repo
  # @param id id of the hook to get
  # @param [Hash] opts the optional parameters
  # @return [Hook]
  describe 'repo_get_hook test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repo_get_issue_templates
  # Get available issue templates for a repository
  # @param owner owner of the repo
  # @param repo name of the repo
  # @param [Hash] opts the optional parameters
  # @return [Array<IssueTemplate>]
  describe 'repo_get_issue_templates test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repo_get_key
  # Get a repository&#39;s key by id
  # @param owner owner of the repo
  # @param repo name of the repo
  # @param id id of the key to get
  # @param [Hash] opts the optional parameters
  # @return [DeployKey]
  describe 'repo_get_key test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repo_get_languages
  # Get languages and number of bytes of code written
  # @param owner owner of the repo
  # @param repo name of the repo
  # @param [Hash] opts the optional parameters
  # @return [Hash<String, Integer>]
  describe 'repo_get_languages test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repo_get_note
  # Get a note corresponding to a single commit from a repository
  # @param owner owner of the repo
  # @param repo name of the repo
  # @param sha a git ref or commit sha
  # @param [Hash] opts the optional parameters
  # @return [Note]
  describe 'repo_get_note test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repo_get_pull_request
  # Get a pull request
  # @param owner owner of the repo
  # @param repo name of the repo
  # @param index index of the pull request to get
  # @param [Hash] opts the optional parameters
  # @return [PullRequest]
  describe 'repo_get_pull_request test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repo_get_pull_request_commits
  # Get commits for a pull request
  # @param owner owner of the repo
  # @param repo name of the repo
  # @param index index of the pull request to get
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page page number of results to return (1-based)
  # @option opts [Integer] :limit page size of results
  # @return [Array<Commit>]
  describe 'repo_get_pull_request_commits test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repo_get_pull_review
  # Get a specific review for a pull request
  # @param owner owner of the repo
  # @param repo name of the repo
  # @param index index of the pull request
  # @param id id of the review
  # @param [Hash] opts the optional parameters
  # @return [PullReview]
  describe 'repo_get_pull_review test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repo_get_pull_review_comments
  # Get a specific review for a pull request
  # @param owner owner of the repo
  # @param repo name of the repo
  # @param index index of the pull request
  # @param id id of the review
  # @param [Hash] opts the optional parameters
  # @return [Array<PullReviewComment>]
  describe 'repo_get_pull_review_comments test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repo_get_raw_file
  # Get a file from a repository
  # @param owner owner of the repo
  # @param repo name of the repo
  # @param filepath filepath of the file to get
  # @param [Hash] opts the optional parameters
  # @option opts [String] :ref The name of the commit/branch/tag. Default the repository’s default branch (usually master)
  # @return [nil]
  describe 'repo_get_raw_file test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repo_get_release
  # Get a release
  # @param owner owner of the repo
  # @param repo name of the repo
  # @param id id of the release to get
  # @param [Hash] opts the optional parameters
  # @return [Release]
  describe 'repo_get_release test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repo_get_release_attachment
  # Get a release attachment
  # @param owner owner of the repo
  # @param repo name of the repo
  # @param id id of the release
  # @param attachment_id id of the attachment to get
  # @param [Hash] opts the optional parameters
  # @return [Attachment]
  describe 'repo_get_release_attachment test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repo_get_release_by_tag
  # Get a release by tag name
  # @param owner owner of the repo
  # @param repo name of the repo
  # @param tag tag name of the release to get
  # @param [Hash] opts the optional parameters
  # @return [Release]
  describe 'repo_get_release_by_tag test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repo_get_reviewers
  # Return all users that can be requested to review in this repo
  # @param owner owner of the repo
  # @param repo name of the repo
  # @param [Hash] opts the optional parameters
  # @return [Array<User>]
  describe 'repo_get_reviewers test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repo_get_single_commit
  # Get a single commit from a repository
  # @param owner owner of the repo
  # @param repo name of the repo
  # @param sha a git ref or commit sha
  # @param [Hash] opts the optional parameters
  # @return [Commit]
  describe 'repo_get_single_commit test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repo_get_tag
  # Get the tag of a repository by tag name
  # @param owner owner of the repo
  # @param repo name of the repo
  # @param tag name of tag
  # @param [Hash] opts the optional parameters
  # @return [Tag]
  describe 'repo_get_tag test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repo_get_wiki_page
  # Get a wiki page
  # @param owner owner of the repo
  # @param repo name of the repo
  # @param page_name name of the page
  # @param [Hash] opts the optional parameters
  # @return [WikiPage]
  describe 'repo_get_wiki_page test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repo_get_wiki_page_revisions
  # Get revisions of a wiki page
  # @param owner owner of the repo
  # @param repo name of the repo
  # @param page_name name of the page
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page page number of results to return (1-based)
  # @return [WikiCommitList]
  describe 'repo_get_wiki_page_revisions test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repo_get_wiki_pages
  # Get all wiki pages
  # @param owner owner of the repo
  # @param repo name of the repo
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page page number of results to return (1-based)
  # @option opts [Integer] :limit page size of results
  # @return [Array<WikiPageMetaData>]
  describe 'repo_get_wiki_pages test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repo_list_all_git_refs
  # Get specified ref or filtered repository&#39;s refs
  # @param owner owner of the repo
  # @param repo name of the repo
  # @param [Hash] opts the optional parameters
  # @return [Array<Reference>]
  describe 'repo_list_all_git_refs test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repo_list_branch_protection
  # List branch protections for a repository
  # @param owner owner of the repo
  # @param repo name of the repo
  # @param [Hash] opts the optional parameters
  # @return [Array<BranchProtection>]
  describe 'repo_list_branch_protection test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repo_list_branches
  # List a repository&#39;s branches
  # @param owner owner of the repo
  # @param repo name of the repo
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page page number of results to return (1-based)
  # @option opts [Integer] :limit page size of results
  # @return [Array<Branch>]
  describe 'repo_list_branches test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repo_list_collaborators
  # List a repository&#39;s collaborators
  # @param owner owner of the repo
  # @param repo name of the repo
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page page number of results to return (1-based)
  # @option opts [Integer] :limit page size of results
  # @return [Array<User>]
  describe 'repo_list_collaborators test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repo_list_git_hooks
  # List the Git hooks in a repository
  # @param owner owner of the repo
  # @param repo name of the repo
  # @param [Hash] opts the optional parameters
  # @return [Array<GitHook>]
  describe 'repo_list_git_hooks test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repo_list_git_refs
  # Get specified ref or filtered repository&#39;s refs
  # @param owner owner of the repo
  # @param repo name of the repo
  # @param ref part or full name of the ref
  # @param [Hash] opts the optional parameters
  # @return [Array<Reference>]
  describe 'repo_list_git_refs test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repo_list_hooks
  # List the hooks in a repository
  # @param owner owner of the repo
  # @param repo name of the repo
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page page number of results to return (1-based)
  # @option opts [Integer] :limit page size of results
  # @return [Array<Hook>]
  describe 'repo_list_hooks test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repo_list_keys
  # List a repository&#39;s keys
  # @param owner owner of the repo
  # @param repo name of the repo
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :key_id the key_id to search for
  # @option opts [String] :fingerprint fingerprint of the key
  # @option opts [Integer] :page page number of results to return (1-based)
  # @option opts [Integer] :limit page size of results
  # @return [Array<DeployKey>]
  describe 'repo_list_keys test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repo_list_pull_requests
  # List a repo&#39;s pull requests
  # @param owner owner of the repo
  # @param repo name of the repo
  # @param [Hash] opts the optional parameters
  # @option opts [String] :state State of pull request: open or closed (optional)
  # @option opts [String] :sort Type of sort
  # @option opts [Integer] :milestone ID of the milestone
  # @option opts [Array<Integer>] :labels Label IDs
  # @option opts [Integer] :page page number of results to return (1-based)
  # @option opts [Integer] :limit page size of results
  # @return [Array<PullRequest>]
  describe 'repo_list_pull_requests test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repo_list_pull_reviews
  # List all reviews for a pull request
  # @param owner owner of the repo
  # @param repo name of the repo
  # @param index index of the pull request
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page page number of results to return (1-based)
  # @option opts [Integer] :limit page size of results
  # @return [Array<PullReview>]
  describe 'repo_list_pull_reviews test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repo_list_release_attachments
  # List release&#39;s attachments
  # @param owner owner of the repo
  # @param repo name of the repo
  # @param id id of the release
  # @param [Hash] opts the optional parameters
  # @return [Array<Attachment>]
  describe 'repo_list_release_attachments test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repo_list_releases
  # List a repo&#39;s releases
  # @param owner owner of the repo
  # @param repo name of the repo
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :draft filter (exclude / include) drafts, if you dont have repo write access none will show
  # @option opts [Boolean] :pre_release filter (exclude / include) pre-releases
  # @option opts [Integer] :per_page page size of results, deprecated - use limit
  # @option opts [Integer] :page page number of results to return (1-based)
  # @option opts [Integer] :limit page size of results
  # @return [Array<Release>]
  describe 'repo_list_releases test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repo_list_stargazers
  # List a repo&#39;s stargazers
  # @param owner owner of the repo
  # @param repo name of the repo
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page page number of results to return (1-based)
  # @option opts [Integer] :limit page size of results
  # @return [Array<User>]
  describe 'repo_list_stargazers test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repo_list_statuses
  # Get a commit&#39;s statuses
  # @param owner owner of the repo
  # @param repo name of the repo
  # @param sha sha of the commit
  # @param [Hash] opts the optional parameters
  # @option opts [String] :sort type of sort
  # @option opts [String] :state type of state
  # @option opts [Integer] :page page number of results to return (1-based)
  # @option opts [Integer] :limit page size of results
  # @return [Array<CommitStatus>]
  describe 'repo_list_statuses test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repo_list_statuses_by_ref
  # Get a commit&#39;s statuses, by branch/tag/commit reference
  # @param owner owner of the repo
  # @param repo name of the repo
  # @param ref name of branch/tag/commit
  # @param [Hash] opts the optional parameters
  # @option opts [String] :sort type of sort
  # @option opts [String] :state type of state
  # @option opts [Integer] :page page number of results to return (1-based)
  # @option opts [Integer] :limit page size of results
  # @return [Array<CommitStatus>]
  describe 'repo_list_statuses_by_ref test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repo_list_subscribers
  # List a repo&#39;s watchers
  # @param owner owner of the repo
  # @param repo name of the repo
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page page number of results to return (1-based)
  # @option opts [Integer] :limit page size of results
  # @return [Array<User>]
  describe 'repo_list_subscribers test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repo_list_tags
  # List a repository&#39;s tags
  # @param owner owner of the repo
  # @param repo name of the repo
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page page number of results to return (1-based)
  # @option opts [Integer] :limit page size of results, default maximum page size is 50
  # @return [Array<Tag>]
  describe 'repo_list_tags test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repo_list_teams
  # List a repository&#39;s teams
  # @param owner owner of the repo
  # @param repo name of the repo
  # @param [Hash] opts the optional parameters
  # @return [Array<Team>]
  describe 'repo_list_teams test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repo_list_topics
  # Get list of topics that a repository has
  # @param owner owner of the repo
  # @param repo name of the repo
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page page number of results to return (1-based)
  # @option opts [Integer] :limit page size of results
  # @return [TopicName]
  describe 'repo_list_topics test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repo_merge_pull_request
  # Merge a pull request
  # @param owner owner of the repo
  # @param repo name of the repo
  # @param index index of the pull request to merge
  # @param [Hash] opts the optional parameters
  # @option opts [MergePullRequestOption] :body 
  # @return [nil]
  describe 'repo_merge_pull_request test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repo_migrate
  # Migrate a remote git repository
  # @param [Hash] opts the optional parameters
  # @option opts [MigrateRepoOptions] :body 
  # @return [Repository]
  describe 'repo_migrate test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repo_mirror_sync
  # Sync a mirrored repository
  # @param owner owner of the repo to sync
  # @param repo name of the repo to sync
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'repo_mirror_sync test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repo_pull_request_is_merged
  # Check if a pull request has been merged
  # @param owner owner of the repo
  # @param repo name of the repo
  # @param index index of the pull request
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'repo_pull_request_is_merged test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repo_search
  # Search for repositories
  # @param [Hash] opts the optional parameters
  # @option opts [String] :q keyword
  # @option opts [Boolean] :topic Limit search to repositories with keyword as topic
  # @option opts [Boolean] :include_desc include search of keyword within repository description
  # @option opts [Integer] :uid search only for repos that the user with the given id owns or contributes to
  # @option opts [Integer] :priority_owner_id repo owner to prioritize in the results
  # @option opts [Integer] :team_id search only for repos that belong to the given team id
  # @option opts [Integer] :starred_by search only for repos that the user with the given id has starred
  # @option opts [Boolean] :private include private repositories this user has access to (defaults to true)
  # @option opts [Boolean] :is_private show only pubic, private or all repositories (defaults to all)
  # @option opts [Boolean] :template include template repositories this user has access to (defaults to true)
  # @option opts [Boolean] :archived show only archived, non-archived or all repositories (defaults to all)
  # @option opts [String] :mode type of repository to search for. Supported values are \&quot;fork\&quot;, \&quot;source\&quot;, \&quot;mirror\&quot; and \&quot;collaborative\&quot;
  # @option opts [Boolean] :exclusive if &#x60;uid&#x60; is given, search only for repos that the user owns
  # @option opts [String] :sort sort repos by attribute. Supported values are \&quot;alpha\&quot;, \&quot;created\&quot;, \&quot;updated\&quot;, \&quot;size\&quot;, and \&quot;id\&quot;. Default is \&quot;alpha\&quot;
  # @option opts [String] :order sort order, either \&quot;asc\&quot; (ascending) or \&quot;desc\&quot; (descending). Default is \&quot;asc\&quot;, ignored if \&quot;sort\&quot; is not specified.
  # @option opts [Integer] :page page number of results to return (1-based)
  # @option opts [Integer] :limit page size of results
  # @return [SearchResults]
  describe 'repo_search test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repo_signing_key
  # Get signing-key.gpg for given repository
  # @param owner owner of the repo
  # @param repo name of the repo
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'repo_signing_key test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repo_submit_pull_review
  # Submit a pending review to an pull request
  # @param owner owner of the repo
  # @param repo name of the repo
  # @param index index of the pull request
  # @param id id of the review
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [PullReview]
  describe 'repo_submit_pull_review test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repo_test_hook
  # Test a push webhook
  # @param owner owner of the repo
  # @param repo name of the repo
  # @param id id of the hook to test
  # @param [Hash] opts the optional parameters
  # @option opts [String] :ref The name of the commit/branch/tag. Default the repository’s default branch (usually master)
  # @return [nil]
  describe 'repo_test_hook test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repo_tracked_times
  # List a repo&#39;s tracked times
  # @param owner owner of the repo
  # @param repo name of the repo
  # @param [Hash] opts the optional parameters
  # @option opts [String] :user optional filter by user (available for issue managers)
  # @option opts [Time] :since Only show times updated after the given time. This is a timestamp in RFC 3339 format
  # @option opts [Time] :before Only show times updated before the given time. This is a timestamp in RFC 3339 format
  # @option opts [Integer] :page page number of results to return (1-based)
  # @option opts [Integer] :limit page size of results
  # @return [Array<TrackedTime>]
  describe 'repo_tracked_times test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repo_transfer
  # Transfer a repo ownership
  # @param owner owner of the repo to transfer
  # @param repo name of the repo to transfer
  # @param body Transfer Options
  # @param [Hash] opts the optional parameters
  # @return [Repository]
  describe 'repo_transfer test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repo_un_dismiss_pull_review
  # Cancel to dismiss a review for a pull request
  # @param owner owner of the repo
  # @param repo name of the repo
  # @param index index of the pull request
  # @param id id of the review
  # @param [Hash] opts the optional parameters
  # @return [PullReview]
  describe 'repo_un_dismiss_pull_review test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repo_update_file
  # Update a file in a repository
  # @param owner owner of the repo
  # @param repo name of the repo
  # @param filepath path of the file to update
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [FileResponse]
  describe 'repo_update_file test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repo_update_pull_request
  # Merge PR&#39;s baseBranch into headBranch
  # @param owner owner of the repo
  # @param repo name of the repo
  # @param index index of the pull request to get
  # @param [Hash] opts the optional parameters
  # @option opts [String] :style how to update pull request
  # @return [nil]
  describe 'repo_update_pull_request test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repo_update_topics
  # Replace list of topics for a repository
  # @param owner owner of the repo
  # @param repo name of the repo
  # @param [Hash] opts the optional parameters
  # @option opts [RepoTopicOptions] :body 
  # @return [nil]
  describe 'repo_update_topics test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for topic_search
  # search topics via keyword
  # @param q keywords to search
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page page number of results to return (1-based)
  # @option opts [Integer] :limit page size of results
  # @return [Array<TopicResponse>]
  describe 'topic_search test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for user_current_check_subscription
  # Check if the current user is watching a repo
  # @param owner owner of the repo
  # @param repo name of the repo
  # @param [Hash] opts the optional parameters
  # @return [WatchInfo]
  describe 'user_current_check_subscription test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for user_current_delete_subscription
  # Unwatch a repo
  # @param owner owner of the repo
  # @param repo name of the repo
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'user_current_delete_subscription test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for user_current_put_subscription
  # Watch a repo
  # @param owner owner of the repo
  # @param repo name of the repo
  # @param [Hash] opts the optional parameters
  # @return [WatchInfo]
  describe 'user_current_put_subscription test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for user_tracked_times
  # List a user&#39;s tracked times in a repo
  # @param owner owner of the repo
  # @param repo name of the repo
  # @param user username of user
  # @param [Hash] opts the optional parameters
  # @return [Array<TrackedTime>]
  describe 'user_tracked_times test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
