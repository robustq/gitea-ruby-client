=begin
#Gitea API.

#This documentation describes the Gitea API.

The version of the OpenAPI document: {{AppVer | JSEscape | Safe}}

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.4.0

=end

require 'date'
require 'time'

module GiteaRubyClient
  # TimelineComment represents a timeline comment (comment of any type) on a commit or issue
  class TimelineComment
    attr_accessor :assignee

    attr_accessor :assignee_team

    attr_accessor :body

    attr_accessor :created_at

    attr_accessor :dependent_issue

    attr_accessor :html_url

    attr_accessor :id

    attr_accessor :issue_url

    attr_accessor :label

    attr_accessor :milestone

    attr_accessor :new_ref

    attr_accessor :new_title

    attr_accessor :old_milestone

    attr_accessor :old_project_id

    attr_accessor :old_ref

    attr_accessor :old_title

    attr_accessor :project_id

    attr_accessor :pull_request_url

    attr_accessor :ref_action

    attr_accessor :ref_comment

    # commit SHA where issue/PR was referenced
    attr_accessor :ref_commit_sha

    attr_accessor :ref_issue

    # whether the assignees were removed or added
    attr_accessor :removed_assignee

    attr_accessor :resolve_doer

    attr_accessor :review_id

    attr_accessor :tracked_time

    attr_accessor :type

    attr_accessor :updated_at

    attr_accessor :user

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'assignee' => :'assignee',
        :'assignee_team' => :'assignee_team',
        :'body' => :'body',
        :'created_at' => :'created_at',
        :'dependent_issue' => :'dependent_issue',
        :'html_url' => :'html_url',
        :'id' => :'id',
        :'issue_url' => :'issue_url',
        :'label' => :'label',
        :'milestone' => :'milestone',
        :'new_ref' => :'new_ref',
        :'new_title' => :'new_title',
        :'old_milestone' => :'old_milestone',
        :'old_project_id' => :'old_project_id',
        :'old_ref' => :'old_ref',
        :'old_title' => :'old_title',
        :'project_id' => :'project_id',
        :'pull_request_url' => :'pull_request_url',
        :'ref_action' => :'ref_action',
        :'ref_comment' => :'ref_comment',
        :'ref_commit_sha' => :'ref_commit_sha',
        :'ref_issue' => :'ref_issue',
        :'removed_assignee' => :'removed_assignee',
        :'resolve_doer' => :'resolve_doer',
        :'review_id' => :'review_id',
        :'tracked_time' => :'tracked_time',
        :'type' => :'type',
        :'updated_at' => :'updated_at',
        :'user' => :'user'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'assignee' => :'User',
        :'assignee_team' => :'Team',
        :'body' => :'String',
        :'created_at' => :'Time',
        :'dependent_issue' => :'Issue',
        :'html_url' => :'String',
        :'id' => :'Integer',
        :'issue_url' => :'String',
        :'label' => :'Label',
        :'milestone' => :'Milestone',
        :'new_ref' => :'String',
        :'new_title' => :'String',
        :'old_milestone' => :'Milestone',
        :'old_project_id' => :'Integer',
        :'old_ref' => :'String',
        :'old_title' => :'String',
        :'project_id' => :'Integer',
        :'pull_request_url' => :'String',
        :'ref_action' => :'String',
        :'ref_comment' => :'Comment',
        :'ref_commit_sha' => :'String',
        :'ref_issue' => :'Issue',
        :'removed_assignee' => :'Boolean',
        :'resolve_doer' => :'User',
        :'review_id' => :'Integer',
        :'tracked_time' => :'TrackedTime',
        :'type' => :'String',
        :'updated_at' => :'Time',
        :'user' => :'User'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `GiteaRubyClient::TimelineComment` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `GiteaRubyClient::TimelineComment`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'assignee')
        self.assignee = attributes[:'assignee']
      end

      if attributes.key?(:'assignee_team')
        self.assignee_team = attributes[:'assignee_team']
      end

      if attributes.key?(:'body')
        self.body = attributes[:'body']
      end

      if attributes.key?(:'created_at')
        self.created_at = attributes[:'created_at']
      end

      if attributes.key?(:'dependent_issue')
        self.dependent_issue = attributes[:'dependent_issue']
      end

      if attributes.key?(:'html_url')
        self.html_url = attributes[:'html_url']
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'issue_url')
        self.issue_url = attributes[:'issue_url']
      end

      if attributes.key?(:'label')
        self.label = attributes[:'label']
      end

      if attributes.key?(:'milestone')
        self.milestone = attributes[:'milestone']
      end

      if attributes.key?(:'new_ref')
        self.new_ref = attributes[:'new_ref']
      end

      if attributes.key?(:'new_title')
        self.new_title = attributes[:'new_title']
      end

      if attributes.key?(:'old_milestone')
        self.old_milestone = attributes[:'old_milestone']
      end

      if attributes.key?(:'old_project_id')
        self.old_project_id = attributes[:'old_project_id']
      end

      if attributes.key?(:'old_ref')
        self.old_ref = attributes[:'old_ref']
      end

      if attributes.key?(:'old_title')
        self.old_title = attributes[:'old_title']
      end

      if attributes.key?(:'project_id')
        self.project_id = attributes[:'project_id']
      end

      if attributes.key?(:'pull_request_url')
        self.pull_request_url = attributes[:'pull_request_url']
      end

      if attributes.key?(:'ref_action')
        self.ref_action = attributes[:'ref_action']
      end

      if attributes.key?(:'ref_comment')
        self.ref_comment = attributes[:'ref_comment']
      end

      if attributes.key?(:'ref_commit_sha')
        self.ref_commit_sha = attributes[:'ref_commit_sha']
      end

      if attributes.key?(:'ref_issue')
        self.ref_issue = attributes[:'ref_issue']
      end

      if attributes.key?(:'removed_assignee')
        self.removed_assignee = attributes[:'removed_assignee']
      end

      if attributes.key?(:'resolve_doer')
        self.resolve_doer = attributes[:'resolve_doer']
      end

      if attributes.key?(:'review_id')
        self.review_id = attributes[:'review_id']
      end

      if attributes.key?(:'tracked_time')
        self.tracked_time = attributes[:'tracked_time']
      end

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.key?(:'updated_at')
        self.updated_at = attributes[:'updated_at']
      end

      if attributes.key?(:'user')
        self.user = attributes[:'user']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          assignee == o.assignee &&
          assignee_team == o.assignee_team &&
          body == o.body &&
          created_at == o.created_at &&
          dependent_issue == o.dependent_issue &&
          html_url == o.html_url &&
          id == o.id &&
          issue_url == o.issue_url &&
          label == o.label &&
          milestone == o.milestone &&
          new_ref == o.new_ref &&
          new_title == o.new_title &&
          old_milestone == o.old_milestone &&
          old_project_id == o.old_project_id &&
          old_ref == o.old_ref &&
          old_title == o.old_title &&
          project_id == o.project_id &&
          pull_request_url == o.pull_request_url &&
          ref_action == o.ref_action &&
          ref_comment == o.ref_comment &&
          ref_commit_sha == o.ref_commit_sha &&
          ref_issue == o.ref_issue &&
          removed_assignee == o.removed_assignee &&
          resolve_doer == o.resolve_doer &&
          review_id == o.review_id &&
          tracked_time == o.tracked_time &&
          type == o.type &&
          updated_at == o.updated_at &&
          user == o.user
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [assignee, assignee_team, body, created_at, dependent_issue, html_url, id, issue_url, label, milestone, new_ref, new_title, old_milestone, old_project_id, old_ref, old_title, project_id, pull_request_url, ref_action, ref_comment, ref_commit_sha, ref_issue, removed_assignee, resolve_doer, review_id, tracked_time, type, updated_at, user].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = GiteaRubyClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
