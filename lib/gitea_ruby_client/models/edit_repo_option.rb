=begin
#Gitea API.

#This documentation describes the Gitea API.

The version of the OpenAPI document: {{AppVer | JSEscape | Safe}}

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.4.0

=end

require 'date'
require 'time'

module GiteaRubyClient
  # EditRepoOption options when editing a repository's properties
  class EditRepoOption
    # update the password used for mirror remote-tracking
    attr_accessor :mirror_password

    # update the username used for mirror remote-tracking
    attr_accessor :mirror_username

    # either `true` to allow mark pr as merged manually, or `false` to prevent it. `has_pull_requests` must be `true`.
    attr_accessor :allow_manual_merge

    # either `true` to allow merging pull requests with a merge commit, or `false` to prevent merging pull requests with merge commits. `has_pull_requests` must be `true`.
    attr_accessor :allow_merge_commits

    # either `true` to allow rebase-merging pull requests, or `false` to prevent rebase-merging. `has_pull_requests` must be `true`.
    attr_accessor :allow_rebase

    # either `true` to allow rebase with explicit merge commits (--no-ff), or `false` to prevent rebase with explicit merge commits. `has_pull_requests` must be `true`.
    attr_accessor :allow_rebase_explicit

    # either `true` to allow updating pull request branch by rebase, or `false` to prevent it. `has_pull_requests` must be `true`.
    attr_accessor :allow_rebase_update

    # either `true` to allow squash-merging pull requests, or `false` to prevent squash-merging. `has_pull_requests` must be `true`.
    attr_accessor :allow_squash_merge

    # set to `true` to archive this repository.
    attr_accessor :archived

    # either `true` to enable AutodetectManualMerge, or `false` to prevent it. `has_pull_requests` must be `true`, Note: In some special cases, misjudgments can occur.
    attr_accessor :autodetect_manual_merge

    # sets the default branch for this repository.
    attr_accessor :default_branch

    # set to `true` to delete pr branch after merge by default
    attr_accessor :default_delete_branch_after_merge

    # set to a merge style to be used by this repository: \"merge\", \"rebase\", \"rebase-merge\", or \"squash\". `has_pull_requests` must be `true`.
    attr_accessor :default_merge_style

    # a short description of the repository.
    attr_accessor :description

    # enable prune - remove obsolete remote-tracking references
    attr_accessor :enable_prune

    attr_accessor :external_tracker

    attr_accessor :external_wiki

    # either `true` to enable issues for this repository or `false` to disable them.
    attr_accessor :has_issues

    # either `true` to enable project unit, or `false` to disable them.
    attr_accessor :has_projects

    # either `true` to allow pull requests, or `false` to prevent pull request.
    attr_accessor :has_pull_requests

    # either `true` to enable the wiki for this repository or `false` to disable it.
    attr_accessor :has_wiki

    # either `true` to ignore whitespace for conflicts, or `false` to not ignore whitespace. `has_pull_requests` must be `true`.
    attr_accessor :ignore_whitespace_conflicts

    attr_accessor :internal_tracker

    # set to a string like `8h30m0s` to set the mirror interval time
    attr_accessor :mirror_interval

    # name of the repository
    attr_accessor :name

    # either `true` to make the repository private or `false` to make it public. Note: you will get a 422 error if the organization restricts changing repository visibility to organization owners and a non-owner tries to change the value of private.
    attr_accessor :private

    # either `true` to make this repository a template or `false` to make it a normal repository
    attr_accessor :template

    # a URL with more information about the repository.
    attr_accessor :website

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'mirror_password' => :'MirrorPassword',
        :'mirror_username' => :'MirrorUsername',
        :'allow_manual_merge' => :'allow_manual_merge',
        :'allow_merge_commits' => :'allow_merge_commits',
        :'allow_rebase' => :'allow_rebase',
        :'allow_rebase_explicit' => :'allow_rebase_explicit',
        :'allow_rebase_update' => :'allow_rebase_update',
        :'allow_squash_merge' => :'allow_squash_merge',
        :'archived' => :'archived',
        :'autodetect_manual_merge' => :'autodetect_manual_merge',
        :'default_branch' => :'default_branch',
        :'default_delete_branch_after_merge' => :'default_delete_branch_after_merge',
        :'default_merge_style' => :'default_merge_style',
        :'description' => :'description',
        :'enable_prune' => :'enable_prune',
        :'external_tracker' => :'external_tracker',
        :'external_wiki' => :'external_wiki',
        :'has_issues' => :'has_issues',
        :'has_projects' => :'has_projects',
        :'has_pull_requests' => :'has_pull_requests',
        :'has_wiki' => :'has_wiki',
        :'ignore_whitespace_conflicts' => :'ignore_whitespace_conflicts',
        :'internal_tracker' => :'internal_tracker',
        :'mirror_interval' => :'mirror_interval',
        :'name' => :'name',
        :'private' => :'private',
        :'template' => :'template',
        :'website' => :'website'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'mirror_password' => :'String',
        :'mirror_username' => :'String',
        :'allow_manual_merge' => :'Boolean',
        :'allow_merge_commits' => :'Boolean',
        :'allow_rebase' => :'Boolean',
        :'allow_rebase_explicit' => :'Boolean',
        :'allow_rebase_update' => :'Boolean',
        :'allow_squash_merge' => :'Boolean',
        :'archived' => :'Boolean',
        :'autodetect_manual_merge' => :'Boolean',
        :'default_branch' => :'String',
        :'default_delete_branch_after_merge' => :'Boolean',
        :'default_merge_style' => :'String',
        :'description' => :'String',
        :'enable_prune' => :'Boolean',
        :'external_tracker' => :'ExternalTracker',
        :'external_wiki' => :'ExternalWiki',
        :'has_issues' => :'Boolean',
        :'has_projects' => :'Boolean',
        :'has_pull_requests' => :'Boolean',
        :'has_wiki' => :'Boolean',
        :'ignore_whitespace_conflicts' => :'Boolean',
        :'internal_tracker' => :'InternalTracker',
        :'mirror_interval' => :'String',
        :'name' => :'String',
        :'private' => :'Boolean',
        :'template' => :'Boolean',
        :'website' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `GiteaRubyClient::EditRepoOption` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `GiteaRubyClient::EditRepoOption`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'mirror_password')
        self.mirror_password = attributes[:'mirror_password']
      end

      if attributes.key?(:'mirror_username')
        self.mirror_username = attributes[:'mirror_username']
      end

      if attributes.key?(:'allow_manual_merge')
        self.allow_manual_merge = attributes[:'allow_manual_merge']
      end

      if attributes.key?(:'allow_merge_commits')
        self.allow_merge_commits = attributes[:'allow_merge_commits']
      end

      if attributes.key?(:'allow_rebase')
        self.allow_rebase = attributes[:'allow_rebase']
      end

      if attributes.key?(:'allow_rebase_explicit')
        self.allow_rebase_explicit = attributes[:'allow_rebase_explicit']
      end

      if attributes.key?(:'allow_rebase_update')
        self.allow_rebase_update = attributes[:'allow_rebase_update']
      end

      if attributes.key?(:'allow_squash_merge')
        self.allow_squash_merge = attributes[:'allow_squash_merge']
      end

      if attributes.key?(:'archived')
        self.archived = attributes[:'archived']
      end

      if attributes.key?(:'autodetect_manual_merge')
        self.autodetect_manual_merge = attributes[:'autodetect_manual_merge']
      end

      if attributes.key?(:'default_branch')
        self.default_branch = attributes[:'default_branch']
      end

      if attributes.key?(:'default_delete_branch_after_merge')
        self.default_delete_branch_after_merge = attributes[:'default_delete_branch_after_merge']
      end

      if attributes.key?(:'default_merge_style')
        self.default_merge_style = attributes[:'default_merge_style']
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'enable_prune')
        self.enable_prune = attributes[:'enable_prune']
      end

      if attributes.key?(:'external_tracker')
        self.external_tracker = attributes[:'external_tracker']
      end

      if attributes.key?(:'external_wiki')
        self.external_wiki = attributes[:'external_wiki']
      end

      if attributes.key?(:'has_issues')
        self.has_issues = attributes[:'has_issues']
      end

      if attributes.key?(:'has_projects')
        self.has_projects = attributes[:'has_projects']
      end

      if attributes.key?(:'has_pull_requests')
        self.has_pull_requests = attributes[:'has_pull_requests']
      end

      if attributes.key?(:'has_wiki')
        self.has_wiki = attributes[:'has_wiki']
      end

      if attributes.key?(:'ignore_whitespace_conflicts')
        self.ignore_whitespace_conflicts = attributes[:'ignore_whitespace_conflicts']
      end

      if attributes.key?(:'internal_tracker')
        self.internal_tracker = attributes[:'internal_tracker']
      end

      if attributes.key?(:'mirror_interval')
        self.mirror_interval = attributes[:'mirror_interval']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'private')
        self.private = attributes[:'private']
      end

      if attributes.key?(:'template')
        self.template = attributes[:'template']
      end

      if attributes.key?(:'website')
        self.website = attributes[:'website']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          mirror_password == o.mirror_password &&
          mirror_username == o.mirror_username &&
          allow_manual_merge == o.allow_manual_merge &&
          allow_merge_commits == o.allow_merge_commits &&
          allow_rebase == o.allow_rebase &&
          allow_rebase_explicit == o.allow_rebase_explicit &&
          allow_rebase_update == o.allow_rebase_update &&
          allow_squash_merge == o.allow_squash_merge &&
          archived == o.archived &&
          autodetect_manual_merge == o.autodetect_manual_merge &&
          default_branch == o.default_branch &&
          default_delete_branch_after_merge == o.default_delete_branch_after_merge &&
          default_merge_style == o.default_merge_style &&
          description == o.description &&
          enable_prune == o.enable_prune &&
          external_tracker == o.external_tracker &&
          external_wiki == o.external_wiki &&
          has_issues == o.has_issues &&
          has_projects == o.has_projects &&
          has_pull_requests == o.has_pull_requests &&
          has_wiki == o.has_wiki &&
          ignore_whitespace_conflicts == o.ignore_whitespace_conflicts &&
          internal_tracker == o.internal_tracker &&
          mirror_interval == o.mirror_interval &&
          name == o.name &&
          private == o.private &&
          template == o.template &&
          website == o.website
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [mirror_password, mirror_username, allow_manual_merge, allow_merge_commits, allow_rebase, allow_rebase_explicit, allow_rebase_update, allow_squash_merge, archived, autodetect_manual_merge, default_branch, default_delete_branch_after_merge, default_merge_style, description, enable_prune, external_tracker, external_wiki, has_issues, has_projects, has_pull_requests, has_wiki, ignore_whitespace_conflicts, internal_tracker, mirror_interval, name, private, template, website].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = GiteaRubyClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
