=begin
#Gitea API.

#This documentation describes the Gitea API.

The version of the OpenAPI document: {{AppVer | JSEscape | Safe}}

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.4.0

=end

require 'date'
require 'time'

module GiteaRubyClient
  # EditUserOption edit user options
  class EditUserOption
    attr_accessor :active

    attr_accessor :admin

    attr_accessor :allow_create_organization

    attr_accessor :allow_git_hook

    attr_accessor :allow_import_local

    attr_accessor :description

    attr_accessor :email

    attr_accessor :full_name

    attr_accessor :location

    attr_accessor :login_name

    attr_accessor :max_repo_creation

    attr_accessor :must_change_password

    attr_accessor :password

    attr_accessor :prohibit_login

    attr_accessor :restricted

    attr_accessor :source_id

    attr_accessor :visibility

    attr_accessor :website

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'active' => :'active',
        :'admin' => :'admin',
        :'allow_create_organization' => :'allow_create_organization',
        :'allow_git_hook' => :'allow_git_hook',
        :'allow_import_local' => :'allow_import_local',
        :'description' => :'description',
        :'email' => :'email',
        :'full_name' => :'full_name',
        :'location' => :'location',
        :'login_name' => :'login_name',
        :'max_repo_creation' => :'max_repo_creation',
        :'must_change_password' => :'must_change_password',
        :'password' => :'password',
        :'prohibit_login' => :'prohibit_login',
        :'restricted' => :'restricted',
        :'source_id' => :'source_id',
        :'visibility' => :'visibility',
        :'website' => :'website'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'active' => :'Boolean',
        :'admin' => :'Boolean',
        :'allow_create_organization' => :'Boolean',
        :'allow_git_hook' => :'Boolean',
        :'allow_import_local' => :'Boolean',
        :'description' => :'String',
        :'email' => :'String',
        :'full_name' => :'String',
        :'location' => :'String',
        :'login_name' => :'String',
        :'max_repo_creation' => :'Integer',
        :'must_change_password' => :'Boolean',
        :'password' => :'String',
        :'prohibit_login' => :'Boolean',
        :'restricted' => :'Boolean',
        :'source_id' => :'Integer',
        :'visibility' => :'String',
        :'website' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `GiteaRubyClient::EditUserOption` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `GiteaRubyClient::EditUserOption`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'active')
        self.active = attributes[:'active']
      end

      if attributes.key?(:'admin')
        self.admin = attributes[:'admin']
      end

      if attributes.key?(:'allow_create_organization')
        self.allow_create_organization = attributes[:'allow_create_organization']
      end

      if attributes.key?(:'allow_git_hook')
        self.allow_git_hook = attributes[:'allow_git_hook']
      end

      if attributes.key?(:'allow_import_local')
        self.allow_import_local = attributes[:'allow_import_local']
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'email')
        self.email = attributes[:'email']
      end

      if attributes.key?(:'full_name')
        self.full_name = attributes[:'full_name']
      end

      if attributes.key?(:'location')
        self.location = attributes[:'location']
      end

      if attributes.key?(:'login_name')
        self.login_name = attributes[:'login_name']
      end

      if attributes.key?(:'max_repo_creation')
        self.max_repo_creation = attributes[:'max_repo_creation']
      end

      if attributes.key?(:'must_change_password')
        self.must_change_password = attributes[:'must_change_password']
      end

      if attributes.key?(:'password')
        self.password = attributes[:'password']
      end

      if attributes.key?(:'prohibit_login')
        self.prohibit_login = attributes[:'prohibit_login']
      end

      if attributes.key?(:'restricted')
        self.restricted = attributes[:'restricted']
      end

      if attributes.key?(:'source_id')
        self.source_id = attributes[:'source_id']
      end

      if attributes.key?(:'visibility')
        self.visibility = attributes[:'visibility']
      end

      if attributes.key?(:'website')
        self.website = attributes[:'website']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @login_name.nil?
        invalid_properties.push('invalid value for "login_name", login_name cannot be nil.')
      end

      if @source_id.nil?
        invalid_properties.push('invalid value for "source_id", source_id cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @login_name.nil?
      return false if @source_id.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          active == o.active &&
          admin == o.admin &&
          allow_create_organization == o.allow_create_organization &&
          allow_git_hook == o.allow_git_hook &&
          allow_import_local == o.allow_import_local &&
          description == o.description &&
          email == o.email &&
          full_name == o.full_name &&
          location == o.location &&
          login_name == o.login_name &&
          max_repo_creation == o.max_repo_creation &&
          must_change_password == o.must_change_password &&
          password == o.password &&
          prohibit_login == o.prohibit_login &&
          restricted == o.restricted &&
          source_id == o.source_id &&
          visibility == o.visibility &&
          website == o.website
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [active, admin, allow_create_organization, allow_git_hook, allow_import_local, description, email, full_name, location, login_name, max_repo_creation, must_change_password, password, prohibit_login, restricted, source_id, visibility, website].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = GiteaRubyClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
