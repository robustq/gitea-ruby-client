=begin
#Gitea API.

#This documentation describes the Gitea API.

The version of the OpenAPI document: {{AppVer | JSEscape | Safe}}

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.4.0

=end

require 'date'
require 'time'

module GiteaRubyClient
  # Repository represents a repository
  class Repository
    attr_accessor :allow_merge_commits

    attr_accessor :allow_rebase

    attr_accessor :allow_rebase_explicit

    attr_accessor :allow_squash_merge

    attr_accessor :archived

    attr_accessor :avatar_url

    attr_accessor :clone_url

    attr_accessor :created_at

    attr_accessor :default_branch

    attr_accessor :default_merge_style

    attr_accessor :description

    attr_accessor :empty

    attr_accessor :external_tracker

    attr_accessor :external_wiki

    attr_accessor :fork

    attr_accessor :forks_count

    attr_accessor :full_name

    attr_accessor :has_issues

    attr_accessor :has_projects

    attr_accessor :has_pull_requests

    attr_accessor :has_wiki

    attr_accessor :html_url

    attr_accessor :id

    attr_accessor :ignore_whitespace_conflicts

    attr_accessor :internal

    attr_accessor :internal_tracker

    attr_accessor :language

    attr_accessor :languages_url

    attr_accessor :mirror

    attr_accessor :mirror_interval

    attr_accessor :mirror_updated

    attr_accessor :name

    attr_accessor :open_issues_count

    attr_accessor :open_pr_counter

    attr_accessor :original_url

    attr_accessor :owner

    attr_accessor :parent

    attr_accessor :permissions

    attr_accessor :private

    attr_accessor :release_counter

    attr_accessor :repo_transfer

    attr_accessor :size

    attr_accessor :ssh_url

    attr_accessor :stars_count

    attr_accessor :template

    attr_accessor :updated_at

    attr_accessor :watchers_count

    attr_accessor :website

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'allow_merge_commits' => :'allow_merge_commits',
        :'allow_rebase' => :'allow_rebase',
        :'allow_rebase_explicit' => :'allow_rebase_explicit',
        :'allow_squash_merge' => :'allow_squash_merge',
        :'archived' => :'archived',
        :'avatar_url' => :'avatar_url',
        :'clone_url' => :'clone_url',
        :'created_at' => :'created_at',
        :'default_branch' => :'default_branch',
        :'default_merge_style' => :'default_merge_style',
        :'description' => :'description',
        :'empty' => :'empty',
        :'external_tracker' => :'external_tracker',
        :'external_wiki' => :'external_wiki',
        :'fork' => :'fork',
        :'forks_count' => :'forks_count',
        :'full_name' => :'full_name',
        :'has_issues' => :'has_issues',
        :'has_projects' => :'has_projects',
        :'has_pull_requests' => :'has_pull_requests',
        :'has_wiki' => :'has_wiki',
        :'html_url' => :'html_url',
        :'id' => :'id',
        :'ignore_whitespace_conflicts' => :'ignore_whitespace_conflicts',
        :'internal' => :'internal',
        :'internal_tracker' => :'internal_tracker',
        :'language' => :'language',
        :'languages_url' => :'languages_url',
        :'mirror' => :'mirror',
        :'mirror_interval' => :'mirror_interval',
        :'mirror_updated' => :'mirror_updated',
        :'name' => :'name',
        :'open_issues_count' => :'open_issues_count',
        :'open_pr_counter' => :'open_pr_counter',
        :'original_url' => :'original_url',
        :'owner' => :'owner',
        :'parent' => :'parent',
        :'permissions' => :'permissions',
        :'private' => :'private',
        :'release_counter' => :'release_counter',
        :'repo_transfer' => :'repo_transfer',
        :'size' => :'size',
        :'ssh_url' => :'ssh_url',
        :'stars_count' => :'stars_count',
        :'template' => :'template',
        :'updated_at' => :'updated_at',
        :'watchers_count' => :'watchers_count',
        :'website' => :'website'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'allow_merge_commits' => :'Boolean',
        :'allow_rebase' => :'Boolean',
        :'allow_rebase_explicit' => :'Boolean',
        :'allow_squash_merge' => :'Boolean',
        :'archived' => :'Boolean',
        :'avatar_url' => :'String',
        :'clone_url' => :'String',
        :'created_at' => :'Time',
        :'default_branch' => :'String',
        :'default_merge_style' => :'String',
        :'description' => :'String',
        :'empty' => :'Boolean',
        :'external_tracker' => :'ExternalTracker',
        :'external_wiki' => :'ExternalWiki',
        :'fork' => :'Boolean',
        :'forks_count' => :'Integer',
        :'full_name' => :'String',
        :'has_issues' => :'Boolean',
        :'has_projects' => :'Boolean',
        :'has_pull_requests' => :'Boolean',
        :'has_wiki' => :'Boolean',
        :'html_url' => :'String',
        :'id' => :'Integer',
        :'ignore_whitespace_conflicts' => :'Boolean',
        :'internal' => :'Boolean',
        :'internal_tracker' => :'InternalTracker',
        :'language' => :'String',
        :'languages_url' => :'String',
        :'mirror' => :'Boolean',
        :'mirror_interval' => :'String',
        :'mirror_updated' => :'Time',
        :'name' => :'String',
        :'open_issues_count' => :'Integer',
        :'open_pr_counter' => :'Integer',
        :'original_url' => :'String',
        :'owner' => :'User',
        :'parent' => :'Repository',
        :'permissions' => :'Permission',
        :'private' => :'Boolean',
        :'release_counter' => :'Integer',
        :'repo_transfer' => :'RepoTransfer',
        :'size' => :'Integer',
        :'ssh_url' => :'String',
        :'stars_count' => :'Integer',
        :'template' => :'Boolean',
        :'updated_at' => :'Time',
        :'watchers_count' => :'Integer',
        :'website' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `GiteaRubyClient::Repository` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `GiteaRubyClient::Repository`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'allow_merge_commits')
        self.allow_merge_commits = attributes[:'allow_merge_commits']
      end

      if attributes.key?(:'allow_rebase')
        self.allow_rebase = attributes[:'allow_rebase']
      end

      if attributes.key?(:'allow_rebase_explicit')
        self.allow_rebase_explicit = attributes[:'allow_rebase_explicit']
      end

      if attributes.key?(:'allow_squash_merge')
        self.allow_squash_merge = attributes[:'allow_squash_merge']
      end

      if attributes.key?(:'archived')
        self.archived = attributes[:'archived']
      end

      if attributes.key?(:'avatar_url')
        self.avatar_url = attributes[:'avatar_url']
      end

      if attributes.key?(:'clone_url')
        self.clone_url = attributes[:'clone_url']
      end

      if attributes.key?(:'created_at')
        self.created_at = attributes[:'created_at']
      end

      if attributes.key?(:'default_branch')
        self.default_branch = attributes[:'default_branch']
      end

      if attributes.key?(:'default_merge_style')
        self.default_merge_style = attributes[:'default_merge_style']
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'empty')
        self.empty = attributes[:'empty']
      end

      if attributes.key?(:'external_tracker')
        self.external_tracker = attributes[:'external_tracker']
      end

      if attributes.key?(:'external_wiki')
        self.external_wiki = attributes[:'external_wiki']
      end

      if attributes.key?(:'fork')
        self.fork = attributes[:'fork']
      end

      if attributes.key?(:'forks_count')
        self.forks_count = attributes[:'forks_count']
      end

      if attributes.key?(:'full_name')
        self.full_name = attributes[:'full_name']
      end

      if attributes.key?(:'has_issues')
        self.has_issues = attributes[:'has_issues']
      end

      if attributes.key?(:'has_projects')
        self.has_projects = attributes[:'has_projects']
      end

      if attributes.key?(:'has_pull_requests')
        self.has_pull_requests = attributes[:'has_pull_requests']
      end

      if attributes.key?(:'has_wiki')
        self.has_wiki = attributes[:'has_wiki']
      end

      if attributes.key?(:'html_url')
        self.html_url = attributes[:'html_url']
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'ignore_whitespace_conflicts')
        self.ignore_whitespace_conflicts = attributes[:'ignore_whitespace_conflicts']
      end

      if attributes.key?(:'internal')
        self.internal = attributes[:'internal']
      end

      if attributes.key?(:'internal_tracker')
        self.internal_tracker = attributes[:'internal_tracker']
      end

      if attributes.key?(:'language')
        self.language = attributes[:'language']
      end

      if attributes.key?(:'languages_url')
        self.languages_url = attributes[:'languages_url']
      end

      if attributes.key?(:'mirror')
        self.mirror = attributes[:'mirror']
      end

      if attributes.key?(:'mirror_interval')
        self.mirror_interval = attributes[:'mirror_interval']
      end

      if attributes.key?(:'mirror_updated')
        self.mirror_updated = attributes[:'mirror_updated']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'open_issues_count')
        self.open_issues_count = attributes[:'open_issues_count']
      end

      if attributes.key?(:'open_pr_counter')
        self.open_pr_counter = attributes[:'open_pr_counter']
      end

      if attributes.key?(:'original_url')
        self.original_url = attributes[:'original_url']
      end

      if attributes.key?(:'owner')
        self.owner = attributes[:'owner']
      end

      if attributes.key?(:'parent')
        self.parent = attributes[:'parent']
      end

      if attributes.key?(:'permissions')
        self.permissions = attributes[:'permissions']
      end

      if attributes.key?(:'private')
        self.private = attributes[:'private']
      end

      if attributes.key?(:'release_counter')
        self.release_counter = attributes[:'release_counter']
      end

      if attributes.key?(:'repo_transfer')
        self.repo_transfer = attributes[:'repo_transfer']
      end

      if attributes.key?(:'size')
        self.size = attributes[:'size']
      end

      if attributes.key?(:'ssh_url')
        self.ssh_url = attributes[:'ssh_url']
      end

      if attributes.key?(:'stars_count')
        self.stars_count = attributes[:'stars_count']
      end

      if attributes.key?(:'template')
        self.template = attributes[:'template']
      end

      if attributes.key?(:'updated_at')
        self.updated_at = attributes[:'updated_at']
      end

      if attributes.key?(:'watchers_count')
        self.watchers_count = attributes[:'watchers_count']
      end

      if attributes.key?(:'website')
        self.website = attributes[:'website']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          allow_merge_commits == o.allow_merge_commits &&
          allow_rebase == o.allow_rebase &&
          allow_rebase_explicit == o.allow_rebase_explicit &&
          allow_squash_merge == o.allow_squash_merge &&
          archived == o.archived &&
          avatar_url == o.avatar_url &&
          clone_url == o.clone_url &&
          created_at == o.created_at &&
          default_branch == o.default_branch &&
          default_merge_style == o.default_merge_style &&
          description == o.description &&
          empty == o.empty &&
          external_tracker == o.external_tracker &&
          external_wiki == o.external_wiki &&
          fork == o.fork &&
          forks_count == o.forks_count &&
          full_name == o.full_name &&
          has_issues == o.has_issues &&
          has_projects == o.has_projects &&
          has_pull_requests == o.has_pull_requests &&
          has_wiki == o.has_wiki &&
          html_url == o.html_url &&
          id == o.id &&
          ignore_whitespace_conflicts == o.ignore_whitespace_conflicts &&
          internal == o.internal &&
          internal_tracker == o.internal_tracker &&
          language == o.language &&
          languages_url == o.languages_url &&
          mirror == o.mirror &&
          mirror_interval == o.mirror_interval &&
          mirror_updated == o.mirror_updated &&
          name == o.name &&
          open_issues_count == o.open_issues_count &&
          open_pr_counter == o.open_pr_counter &&
          original_url == o.original_url &&
          owner == o.owner &&
          parent == o.parent &&
          permissions == o.permissions &&
          private == o.private &&
          release_counter == o.release_counter &&
          repo_transfer == o.repo_transfer &&
          size == o.size &&
          ssh_url == o.ssh_url &&
          stars_count == o.stars_count &&
          template == o.template &&
          updated_at == o.updated_at &&
          watchers_count == o.watchers_count &&
          website == o.website
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [allow_merge_commits, allow_rebase, allow_rebase_explicit, allow_squash_merge, archived, avatar_url, clone_url, created_at, default_branch, default_merge_style, description, empty, external_tracker, external_wiki, fork, forks_count, full_name, has_issues, has_projects, has_pull_requests, has_wiki, html_url, id, ignore_whitespace_conflicts, internal, internal_tracker, language, languages_url, mirror, mirror_interval, mirror_updated, name, open_issues_count, open_pr_counter, original_url, owner, parent, permissions, private, release_counter, repo_transfer, size, ssh_url, stars_count, template, updated_at, watchers_count, website].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = GiteaRubyClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
