=begin
#Gitea API.

#This documentation describes the Gitea API.

The version of the OpenAPI document: {{AppVer | JSEscape | Safe}}

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.4.0

=end

require 'date'
require 'time'

module GiteaRubyClient
  # MigrateRepoOptions options for migrating repository's this is used to interact with api v1
  class MigrateRepoOptions
    attr_accessor :auth_password

    attr_accessor :auth_token

    attr_accessor :auth_username

    attr_accessor :clone_addr

    attr_accessor :description

    attr_accessor :issues

    attr_accessor :labels

    attr_accessor :lfs

    attr_accessor :lfs_endpoint

    attr_accessor :milestones

    attr_accessor :mirror

    attr_accessor :mirror_interval

    attr_accessor :private

    attr_accessor :pull_requests

    attr_accessor :releases

    attr_accessor :repo_name

    # Name of User or Organisation who will own Repo after migration
    attr_accessor :repo_owner

    attr_accessor :service

    # deprecated (only for backwards compatibility)
    attr_accessor :uid

    attr_accessor :wiki

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'auth_password' => :'auth_password',
        :'auth_token' => :'auth_token',
        :'auth_username' => :'auth_username',
        :'clone_addr' => :'clone_addr',
        :'description' => :'description',
        :'issues' => :'issues',
        :'labels' => :'labels',
        :'lfs' => :'lfs',
        :'lfs_endpoint' => :'lfs_endpoint',
        :'milestones' => :'milestones',
        :'mirror' => :'mirror',
        :'mirror_interval' => :'mirror_interval',
        :'private' => :'private',
        :'pull_requests' => :'pull_requests',
        :'releases' => :'releases',
        :'repo_name' => :'repo_name',
        :'repo_owner' => :'repo_owner',
        :'service' => :'service',
        :'uid' => :'uid',
        :'wiki' => :'wiki'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'auth_password' => :'String',
        :'auth_token' => :'String',
        :'auth_username' => :'String',
        :'clone_addr' => :'String',
        :'description' => :'String',
        :'issues' => :'Boolean',
        :'labels' => :'Boolean',
        :'lfs' => :'Boolean',
        :'lfs_endpoint' => :'String',
        :'milestones' => :'Boolean',
        :'mirror' => :'Boolean',
        :'mirror_interval' => :'String',
        :'private' => :'Boolean',
        :'pull_requests' => :'Boolean',
        :'releases' => :'Boolean',
        :'repo_name' => :'String',
        :'repo_owner' => :'String',
        :'service' => :'String',
        :'uid' => :'Integer',
        :'wiki' => :'Boolean'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `GiteaRubyClient::MigrateRepoOptions` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `GiteaRubyClient::MigrateRepoOptions`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'auth_password')
        self.auth_password = attributes[:'auth_password']
      end

      if attributes.key?(:'auth_token')
        self.auth_token = attributes[:'auth_token']
      end

      if attributes.key?(:'auth_username')
        self.auth_username = attributes[:'auth_username']
      end

      if attributes.key?(:'clone_addr')
        self.clone_addr = attributes[:'clone_addr']
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'issues')
        self.issues = attributes[:'issues']
      end

      if attributes.key?(:'labels')
        self.labels = attributes[:'labels']
      end

      if attributes.key?(:'lfs')
        self.lfs = attributes[:'lfs']
      end

      if attributes.key?(:'lfs_endpoint')
        self.lfs_endpoint = attributes[:'lfs_endpoint']
      end

      if attributes.key?(:'milestones')
        self.milestones = attributes[:'milestones']
      end

      if attributes.key?(:'mirror')
        self.mirror = attributes[:'mirror']
      end

      if attributes.key?(:'mirror_interval')
        self.mirror_interval = attributes[:'mirror_interval']
      end

      if attributes.key?(:'private')
        self.private = attributes[:'private']
      end

      if attributes.key?(:'pull_requests')
        self.pull_requests = attributes[:'pull_requests']
      end

      if attributes.key?(:'releases')
        self.releases = attributes[:'releases']
      end

      if attributes.key?(:'repo_name')
        self.repo_name = attributes[:'repo_name']
      end

      if attributes.key?(:'repo_owner')
        self.repo_owner = attributes[:'repo_owner']
      end

      if attributes.key?(:'service')
        self.service = attributes[:'service']
      end

      if attributes.key?(:'uid')
        self.uid = attributes[:'uid']
      end

      if attributes.key?(:'wiki')
        self.wiki = attributes[:'wiki']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @clone_addr.nil?
        invalid_properties.push('invalid value for "clone_addr", clone_addr cannot be nil.')
      end

      if @repo_name.nil?
        invalid_properties.push('invalid value for "repo_name", repo_name cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @clone_addr.nil?
      return false if @repo_name.nil?
      service_validator = EnumAttributeValidator.new('String', ["git", "github", "gitea", "gitlab"])
      return false unless service_validator.valid?(@service)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] service Object to be assigned
    def service=(service)
      validator = EnumAttributeValidator.new('String', ["git", "github", "gitea", "gitlab"])
      unless validator.valid?(service)
        fail ArgumentError, "invalid value for \"service\", must be one of #{validator.allowable_values}."
      end
      @service = service
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          auth_password == o.auth_password &&
          auth_token == o.auth_token &&
          auth_username == o.auth_username &&
          clone_addr == o.clone_addr &&
          description == o.description &&
          issues == o.issues &&
          labels == o.labels &&
          lfs == o.lfs &&
          lfs_endpoint == o.lfs_endpoint &&
          milestones == o.milestones &&
          mirror == o.mirror &&
          mirror_interval == o.mirror_interval &&
          private == o.private &&
          pull_requests == o.pull_requests &&
          releases == o.releases &&
          repo_name == o.repo_name &&
          repo_owner == o.repo_owner &&
          service == o.service &&
          uid == o.uid &&
          wiki == o.wiki
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [auth_password, auth_token, auth_username, clone_addr, description, issues, labels, lfs, lfs_endpoint, milestones, mirror, mirror_interval, private, pull_requests, releases, repo_name, repo_owner, service, uid, wiki].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = GiteaRubyClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
