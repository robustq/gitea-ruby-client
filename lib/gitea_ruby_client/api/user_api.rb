=begin
#Gitea API.

#This documentation describes the Gitea API.

The version of the OpenAPI document: {{AppVer | JSEscape | Safe}}

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.4.0

=end

require 'cgi'

module GiteaRubyClient
  class UserApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a repository
    # @param [Hash] opts the optional parameters
    # @option opts [CreateRepoOption] :body 
    # @return [Repository]
    def create_current_user_repo(opts = {})
      data, _status_code, _headers = create_current_user_repo_with_http_info(opts)
      data
    end

    # Create a repository
    # @param [Hash] opts the optional parameters
    # @option opts [CreateRepoOption] :body 
    # @return [Array<(Repository, Integer, Hash)>] Repository data, response status code and response headers
    def create_current_user_repo_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.create_current_user_repo ...'
      end
      # resource path
      local_var_path = '/user/repos'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'body'])

      # return_type
      return_type = opts[:debug_return_type] || 'Repository'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token']

      new_options = opts.merge(
        :operation => :"UserApi.create_current_user_repo",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#create_current_user_repo\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get user settings
    # @param [Hash] opts the optional parameters
    # @return [Array<UserSettings>]
    def get_user_settings(opts = {})
      data, _status_code, _headers = get_user_settings_with_http_info(opts)
      data
    end

    # Get user settings
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<UserSettings>, Integer, Hash)>] Array<UserSettings> data, response status code and response headers
    def get_user_settings_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.get_user_settings ...'
      end
      # resource path
      local_var_path = '/user/settings'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<UserSettings>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token']

      new_options = opts.merge(
        :operation => :"UserApi.get_user_settings",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#get_user_settings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a Token to verify
    # @param [Hash] opts the optional parameters
    # @return [String]
    def get_verification_token(opts = {})
      data, _status_code, _headers = get_verification_token_with_http_info(opts)
      data
    end

    # Get a Token to verify
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def get_verification_token_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.get_verification_token ...'
      end
      # resource path
      local_var_path = '/user/gpg_key_token'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'String'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token']

      new_options = opts.merge(
        :operation => :"UserApi.get_verification_token",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#get_verification_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update user settings
    # @param [Hash] opts the optional parameters
    # @option opts [UserSettingsOptions] :body 
    # @return [Array<UserSettings>]
    def update_user_settings(opts = {})
      data, _status_code, _headers = update_user_settings_with_http_info(opts)
      data
    end

    # Update user settings
    # @param [Hash] opts the optional parameters
    # @option opts [UserSettingsOptions] :body 
    # @return [Array<(Array<UserSettings>, Integer, Hash)>] Array<UserSettings> data, response status code and response headers
    def update_user_settings_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.update_user_settings ...'
      end
      # resource path
      local_var_path = '/user/settings'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/plain'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'body'])

      # return_type
      return_type = opts[:debug_return_type] || 'Array<UserSettings>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token']

      new_options = opts.merge(
        :operation => :"UserApi.update_user_settings",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#update_user_settings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add email addresses
    # @param [Hash] opts the optional parameters
    # @option opts [CreateEmailOption] :body 
    # @return [Array<Email>]
    def user_add_email(opts = {})
      data, _status_code, _headers = user_add_email_with_http_info(opts)
      data
    end

    # Add email addresses
    # @param [Hash] opts the optional parameters
    # @option opts [CreateEmailOption] :body 
    # @return [Array<(Array<Email>, Integer, Hash)>] Array<Email> data, response status code and response headers
    def user_add_email_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.user_add_email ...'
      end
      # resource path
      local_var_path = '/user/emails'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/plain'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'body'])

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Email>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token']

      new_options = opts.merge(
        :operation => :"UserApi.user_add_email",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#user_add_email\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Check if one user is following another user
    # @param username [String] username of following user
    # @param target [String] username of followed user
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def user_check_following(username, target, opts = {})
      user_check_following_with_http_info(username, target, opts)
      nil
    end

    # Check if one user is following another user
    # @param username [String] username of following user
    # @param target [String] username of followed user
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def user_check_following_with_http_info(username, target, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.user_check_following ...'
      end
      # verify the required parameter 'username' is set
      if @api_client.config.client_side_validation && username.nil?
        fail ArgumentError, "Missing the required parameter 'username' when calling UserApi.user_check_following"
      end
      # verify the required parameter 'target' is set
      if @api_client.config.client_side_validation && target.nil?
        fail ArgumentError, "Missing the required parameter 'target' when calling UserApi.user_check_following"
      end
      # resource path
      local_var_path = '/users/{username}/following/{target}'.sub('{' + 'username' + '}', CGI.escape(username.to_s)).sub('{' + 'target' + '}', CGI.escape(target.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token']

      new_options = opts.merge(
        :operation => :"UserApi.user_check_following",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#user_check_following\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # creates a new OAuth2 application
    # @param body [CreateOAuth2ApplicationOptions] 
    # @param [Hash] opts the optional parameters
    # @return [OAuth2Application]
    def user_create_o_auth2_application(body, opts = {})
      data, _status_code, _headers = user_create_o_auth2_application_with_http_info(body, opts)
      data
    end

    # creates a new OAuth2 application
    # @param body [CreateOAuth2ApplicationOptions] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(OAuth2Application, Integer, Hash)>] OAuth2Application data, response status code and response headers
    def user_create_o_auth2_application_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.user_create_o_auth2_application ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling UserApi.user_create_o_auth2_application"
      end
      # resource path
      local_var_path = '/user/applications/oauth2'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/plain'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'OAuth2Application'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token']

      new_options = opts.merge(
        :operation => :"UserApi.user_create_o_auth2_application",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#user_create_o_auth2_application\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create an access token
    # @param username [String] username of user
    # @param [Hash] opts the optional parameters
    # @option opts [CreateAccessTokenOption] :user_create_token 
    # @return [AccessToken]
    def user_create_token(username, opts = {})
      data, _status_code, _headers = user_create_token_with_http_info(username, opts)
      data
    end

    # Create an access token
    # @param username [String] username of user
    # @param [Hash] opts the optional parameters
    # @option opts [CreateAccessTokenOption] :user_create_token 
    # @return [Array<(AccessToken, Integer, Hash)>] AccessToken data, response status code and response headers
    def user_create_token_with_http_info(username, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.user_create_token ...'
      end
      # verify the required parameter 'username' is set
      if @api_client.config.client_side_validation && username.nil?
        fail ArgumentError, "Missing the required parameter 'username' when calling UserApi.user_create_token"
      end
      # resource path
      local_var_path = '/users/{username}/tokens'.sub('{' + 'username' + '}', CGI.escape(username.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'user_create_token'])

      # return_type
      return_type = opts[:debug_return_type] || 'AccessToken'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token']

      new_options = opts.merge(
        :operation => :"UserApi.user_create_token",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#user_create_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Check whether a user is followed by the authenticated user
    # @param username [String] username of followed user
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def user_current_check_following(username, opts = {})
      user_current_check_following_with_http_info(username, opts)
      nil
    end

    # Check whether a user is followed by the authenticated user
    # @param username [String] username of followed user
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def user_current_check_following_with_http_info(username, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.user_current_check_following ...'
      end
      # verify the required parameter 'username' is set
      if @api_client.config.client_side_validation && username.nil?
        fail ArgumentError, "Missing the required parameter 'username' when calling UserApi.user_current_check_following"
      end
      # resource path
      local_var_path = '/user/following/{username}'.sub('{' + 'username' + '}', CGI.escape(username.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token']

      new_options = opts.merge(
        :operation => :"UserApi.user_current_check_following",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#user_current_check_following\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Whether the authenticated is starring the repo
    # @param owner [String] owner of the repo
    # @param repo [String] name of the repo
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def user_current_check_starring(owner, repo, opts = {})
      user_current_check_starring_with_http_info(owner, repo, opts)
      nil
    end

    # Whether the authenticated is starring the repo
    # @param owner [String] owner of the repo
    # @param repo [String] name of the repo
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def user_current_check_starring_with_http_info(owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.user_current_check_starring ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling UserApi.user_current_check_starring"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling UserApi.user_current_check_starring"
      end
      # resource path
      local_var_path = '/user/starred/{owner}/{repo}'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token']

      new_options = opts.merge(
        :operation => :"UserApi.user_current_check_starring",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#user_current_check_starring\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Unfollow a user
    # @param username [String] username of user to unfollow
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def user_current_delete_follow(username, opts = {})
      user_current_delete_follow_with_http_info(username, opts)
      nil
    end

    # Unfollow a user
    # @param username [String] username of user to unfollow
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def user_current_delete_follow_with_http_info(username, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.user_current_delete_follow ...'
      end
      # verify the required parameter 'username' is set
      if @api_client.config.client_side_validation && username.nil?
        fail ArgumentError, "Missing the required parameter 'username' when calling UserApi.user_current_delete_follow"
      end
      # resource path
      local_var_path = '/user/following/{username}'.sub('{' + 'username' + '}', CGI.escape(username.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token']

      new_options = opts.merge(
        :operation => :"UserApi.user_current_delete_follow",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#user_current_delete_follow\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove a GPG key
    # @param id [Integer] id of key to delete
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def user_current_delete_gpg_key(id, opts = {})
      user_current_delete_gpg_key_with_http_info(id, opts)
      nil
    end

    # Remove a GPG key
    # @param id [Integer] id of key to delete
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def user_current_delete_gpg_key_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.user_current_delete_gpg_key ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UserApi.user_current_delete_gpg_key"
      end
      # resource path
      local_var_path = '/user/gpg_keys/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token']

      new_options = opts.merge(
        :operation => :"UserApi.user_current_delete_gpg_key",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#user_current_delete_gpg_key\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a public key
    # @param id [Integer] id of key to delete
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def user_current_delete_key(id, opts = {})
      user_current_delete_key_with_http_info(id, opts)
      nil
    end

    # Delete a public key
    # @param id [Integer] id of key to delete
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def user_current_delete_key_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.user_current_delete_key ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UserApi.user_current_delete_key"
      end
      # resource path
      local_var_path = '/user/keys/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token']

      new_options = opts.merge(
        :operation => :"UserApi.user_current_delete_key",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#user_current_delete_key\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Unstar the given repo
    # @param owner [String] owner of the repo to unstar
    # @param repo [String] name of the repo to unstar
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def user_current_delete_star(owner, repo, opts = {})
      user_current_delete_star_with_http_info(owner, repo, opts)
      nil
    end

    # Unstar the given repo
    # @param owner [String] owner of the repo to unstar
    # @param repo [String] name of the repo to unstar
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def user_current_delete_star_with_http_info(owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.user_current_delete_star ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling UserApi.user_current_delete_star"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling UserApi.user_current_delete_star"
      end
      # resource path
      local_var_path = '/user/starred/{owner}/{repo}'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token']

      new_options = opts.merge(
        :operation => :"UserApi.user_current_delete_star",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#user_current_delete_star\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a GPG key
    # @param id [Integer] id of key to get
    # @param [Hash] opts the optional parameters
    # @return [GPGKey]
    def user_current_get_gpg_key(id, opts = {})
      data, _status_code, _headers = user_current_get_gpg_key_with_http_info(id, opts)
      data
    end

    # Get a GPG key
    # @param id [Integer] id of key to get
    # @param [Hash] opts the optional parameters
    # @return [Array<(GPGKey, Integer, Hash)>] GPGKey data, response status code and response headers
    def user_current_get_gpg_key_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.user_current_get_gpg_key ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UserApi.user_current_get_gpg_key"
      end
      # resource path
      local_var_path = '/user/gpg_keys/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GPGKey'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token']

      new_options = opts.merge(
        :operation => :"UserApi.user_current_get_gpg_key",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#user_current_get_gpg_key\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a public key
    # @param id [Integer] id of key to get
    # @param [Hash] opts the optional parameters
    # @return [PublicKey]
    def user_current_get_key(id, opts = {})
      data, _status_code, _headers = user_current_get_key_with_http_info(id, opts)
      data
    end

    # Get a public key
    # @param id [Integer] id of key to get
    # @param [Hash] opts the optional parameters
    # @return [Array<(PublicKey, Integer, Hash)>] PublicKey data, response status code and response headers
    def user_current_get_key_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.user_current_get_key ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UserApi.user_current_get_key"
      end
      # resource path
      local_var_path = '/user/keys/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PublicKey'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token']

      new_options = opts.merge(
        :operation => :"UserApi.user_current_get_key",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#user_current_get_key\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List the authenticated user's followers
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page page number of results to return (1-based)
    # @option opts [Integer] :limit page size of results
    # @return [Array<User>]
    def user_current_list_followers(opts = {})
      data, _status_code, _headers = user_current_list_followers_with_http_info(opts)
      data
    end

    # List the authenticated user&#39;s followers
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page page number of results to return (1-based)
    # @option opts [Integer] :limit page size of results
    # @return [Array<(Array<User>, Integer, Hash)>] Array<User> data, response status code and response headers
    def user_current_list_followers_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.user_current_list_followers ...'
      end
      # resource path
      local_var_path = '/user/followers'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<User>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token']

      new_options = opts.merge(
        :operation => :"UserApi.user_current_list_followers",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#user_current_list_followers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List the users that the authenticated user is following
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page page number of results to return (1-based)
    # @option opts [Integer] :limit page size of results
    # @return [Array<User>]
    def user_current_list_following(opts = {})
      data, _status_code, _headers = user_current_list_following_with_http_info(opts)
      data
    end

    # List the users that the authenticated user is following
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page page number of results to return (1-based)
    # @option opts [Integer] :limit page size of results
    # @return [Array<(Array<User>, Integer, Hash)>] Array<User> data, response status code and response headers
    def user_current_list_following_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.user_current_list_following ...'
      end
      # resource path
      local_var_path = '/user/following'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<User>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token']

      new_options = opts.merge(
        :operation => :"UserApi.user_current_list_following",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#user_current_list_following\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List the authenticated user's GPG keys
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page page number of results to return (1-based)
    # @option opts [Integer] :limit page size of results
    # @return [Array<GPGKey>]
    def user_current_list_gpg_keys(opts = {})
      data, _status_code, _headers = user_current_list_gpg_keys_with_http_info(opts)
      data
    end

    # List the authenticated user&#39;s GPG keys
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page page number of results to return (1-based)
    # @option opts [Integer] :limit page size of results
    # @return [Array<(Array<GPGKey>, Integer, Hash)>] Array<GPGKey> data, response status code and response headers
    def user_current_list_gpg_keys_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.user_current_list_gpg_keys ...'
      end
      # resource path
      local_var_path = '/user/gpg_keys'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<GPGKey>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token']

      new_options = opts.merge(
        :operation => :"UserApi.user_current_list_gpg_keys",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#user_current_list_gpg_keys\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List the authenticated user's public keys
    # @param [Hash] opts the optional parameters
    # @option opts [String] :fingerprint fingerprint of the key
    # @option opts [Integer] :page page number of results to return (1-based)
    # @option opts [Integer] :limit page size of results
    # @return [Array<PublicKey>]
    def user_current_list_keys(opts = {})
      data, _status_code, _headers = user_current_list_keys_with_http_info(opts)
      data
    end

    # List the authenticated user&#39;s public keys
    # @param [Hash] opts the optional parameters
    # @option opts [String] :fingerprint fingerprint of the key
    # @option opts [Integer] :page page number of results to return (1-based)
    # @option opts [Integer] :limit page size of results
    # @return [Array<(Array<PublicKey>, Integer, Hash)>] Array<PublicKey> data, response status code and response headers
    def user_current_list_keys_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.user_current_list_keys ...'
      end
      # resource path
      local_var_path = '/user/keys'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'fingerprint'] = opts[:'fingerprint'] if !opts[:'fingerprint'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<PublicKey>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token']

      new_options = opts.merge(
        :operation => :"UserApi.user_current_list_keys",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#user_current_list_keys\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List the repos that the authenticated user owns
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page page number of results to return (1-based)
    # @option opts [Integer] :limit page size of results
    # @return [Array<Repository>]
    def user_current_list_repos(opts = {})
      data, _status_code, _headers = user_current_list_repos_with_http_info(opts)
      data
    end

    # List the repos that the authenticated user owns
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page page number of results to return (1-based)
    # @option opts [Integer] :limit page size of results
    # @return [Array<(Array<Repository>, Integer, Hash)>] Array<Repository> data, response status code and response headers
    def user_current_list_repos_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.user_current_list_repos ...'
      end
      # resource path
      local_var_path = '/user/repos'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Repository>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token']

      new_options = opts.merge(
        :operation => :"UserApi.user_current_list_repos",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#user_current_list_repos\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # The repos that the authenticated user has starred
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page page number of results to return (1-based)
    # @option opts [Integer] :limit page size of results
    # @return [Array<Repository>]
    def user_current_list_starred(opts = {})
      data, _status_code, _headers = user_current_list_starred_with_http_info(opts)
      data
    end

    # The repos that the authenticated user has starred
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page page number of results to return (1-based)
    # @option opts [Integer] :limit page size of results
    # @return [Array<(Array<Repository>, Integer, Hash)>] Array<Repository> data, response status code and response headers
    def user_current_list_starred_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.user_current_list_starred ...'
      end
      # resource path
      local_var_path = '/user/starred'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Repository>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token']

      new_options = opts.merge(
        :operation => :"UserApi.user_current_list_starred",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#user_current_list_starred\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List repositories watched by the authenticated user
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page page number of results to return (1-based)
    # @option opts [Integer] :limit page size of results
    # @return [Array<Repository>]
    def user_current_list_subscriptions(opts = {})
      data, _status_code, _headers = user_current_list_subscriptions_with_http_info(opts)
      data
    end

    # List repositories watched by the authenticated user
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page page number of results to return (1-based)
    # @option opts [Integer] :limit page size of results
    # @return [Array<(Array<Repository>, Integer, Hash)>] Array<Repository> data, response status code and response headers
    def user_current_list_subscriptions_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.user_current_list_subscriptions ...'
      end
      # resource path
      local_var_path = '/user/subscriptions'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Repository>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token']

      new_options = opts.merge(
        :operation => :"UserApi.user_current_list_subscriptions",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#user_current_list_subscriptions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a GPG key
    # @param [Hash] opts the optional parameters
    # @option opts [CreateGPGKeyOption] :form 
    # @return [GPGKey]
    def user_current_post_gpg_key(opts = {})
      data, _status_code, _headers = user_current_post_gpg_key_with_http_info(opts)
      data
    end

    # Create a GPG key
    # @param [Hash] opts the optional parameters
    # @option opts [CreateGPGKeyOption] :form 
    # @return [Array<(GPGKey, Integer, Hash)>] GPGKey data, response status code and response headers
    def user_current_post_gpg_key_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.user_current_post_gpg_key ...'
      end
      # resource path
      local_var_path = '/user/gpg_keys'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'form'])

      # return_type
      return_type = opts[:debug_return_type] || 'GPGKey'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token']

      new_options = opts.merge(
        :operation => :"UserApi.user_current_post_gpg_key",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#user_current_post_gpg_key\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a public key
    # @param [Hash] opts the optional parameters
    # @option opts [CreateKeyOption] :body 
    # @return [PublicKey]
    def user_current_post_key(opts = {})
      data, _status_code, _headers = user_current_post_key_with_http_info(opts)
      data
    end

    # Create a public key
    # @param [Hash] opts the optional parameters
    # @option opts [CreateKeyOption] :body 
    # @return [Array<(PublicKey, Integer, Hash)>] PublicKey data, response status code and response headers
    def user_current_post_key_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.user_current_post_key ...'
      end
      # resource path
      local_var_path = '/user/keys'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'body'])

      # return_type
      return_type = opts[:debug_return_type] || 'PublicKey'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token']

      new_options = opts.merge(
        :operation => :"UserApi.user_current_post_key",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#user_current_post_key\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Follow a user
    # @param username [String] username of user to follow
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def user_current_put_follow(username, opts = {})
      user_current_put_follow_with_http_info(username, opts)
      nil
    end

    # Follow a user
    # @param username [String] username of user to follow
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def user_current_put_follow_with_http_info(username, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.user_current_put_follow ...'
      end
      # verify the required parameter 'username' is set
      if @api_client.config.client_side_validation && username.nil?
        fail ArgumentError, "Missing the required parameter 'username' when calling UserApi.user_current_put_follow"
      end
      # resource path
      local_var_path = '/user/following/{username}'.sub('{' + 'username' + '}', CGI.escape(username.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token']

      new_options = opts.merge(
        :operation => :"UserApi.user_current_put_follow",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#user_current_put_follow\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Star the given repo
    # @param owner [String] owner of the repo to star
    # @param repo [String] name of the repo to star
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def user_current_put_star(owner, repo, opts = {})
      user_current_put_star_with_http_info(owner, repo, opts)
      nil
    end

    # Star the given repo
    # @param owner [String] owner of the repo to star
    # @param repo [String] name of the repo to star
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def user_current_put_star_with_http_info(owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.user_current_put_star ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling UserApi.user_current_put_star"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling UserApi.user_current_put_star"
      end
      # resource path
      local_var_path = '/user/starred/{owner}/{repo}'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token']

      new_options = opts.merge(
        :operation => :"UserApi.user_current_put_star",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#user_current_put_star\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List the current user's tracked times
    # @param [Hash] opts the optional parameters
    # @option opts [Time] :since Only show times updated after the given time. This is a timestamp in RFC 3339 format
    # @option opts [Time] :before Only show times updated before the given time. This is a timestamp in RFC 3339 format
    # @return [Array<TrackedTime>]
    def user_current_tracked_times(opts = {})
      data, _status_code, _headers = user_current_tracked_times_with_http_info(opts)
      data
    end

    # List the current user&#39;s tracked times
    # @param [Hash] opts the optional parameters
    # @option opts [Time] :since Only show times updated after the given time. This is a timestamp in RFC 3339 format
    # @option opts [Time] :before Only show times updated before the given time. This is a timestamp in RFC 3339 format
    # @return [Array<(Array<TrackedTime>, Integer, Hash)>] Array<TrackedTime> data, response status code and response headers
    def user_current_tracked_times_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.user_current_tracked_times ...'
      end
      # resource path
      local_var_path = '/user/times'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'since'] = opts[:'since'] if !opts[:'since'].nil?
      query_params[:'before'] = opts[:'before'] if !opts[:'before'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<TrackedTime>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token']

      new_options = opts.merge(
        :operation => :"UserApi.user_current_tracked_times",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#user_current_tracked_times\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # delete an access token
    # @param username [String] username of user
    # @param token [String] token to be deleted, identified by ID and if not available by name
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def user_delete_access_token(username, token, opts = {})
      user_delete_access_token_with_http_info(username, token, opts)
      nil
    end

    # delete an access token
    # @param username [String] username of user
    # @param token [String] token to be deleted, identified by ID and if not available by name
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def user_delete_access_token_with_http_info(username, token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.user_delete_access_token ...'
      end
      # verify the required parameter 'username' is set
      if @api_client.config.client_side_validation && username.nil?
        fail ArgumentError, "Missing the required parameter 'username' when calling UserApi.user_delete_access_token"
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling UserApi.user_delete_access_token"
      end
      # resource path
      local_var_path = '/users/{username}/tokens/{token}'.sub('{' + 'username' + '}', CGI.escape(username.to_s)).sub('{' + 'token' + '}', CGI.escape(token.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token']

      new_options = opts.merge(
        :operation => :"UserApi.user_delete_access_token",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#user_delete_access_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete email addresses
    # @param [Hash] opts the optional parameters
    # @option opts [DeleteEmailOption] :body 
    # @return [nil]
    def user_delete_email(opts = {})
      user_delete_email_with_http_info(opts)
      nil
    end

    # Delete email addresses
    # @param [Hash] opts the optional parameters
    # @option opts [DeleteEmailOption] :body 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def user_delete_email_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.user_delete_email ...'
      end
      # resource path
      local_var_path = '/user/emails'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/plain'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'body'])

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token']

      new_options = opts.merge(
        :operation => :"UserApi.user_delete_email",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#user_delete_email\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # delete an OAuth2 Application
    # @param id [Integer] token to be deleted
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def user_delete_o_auth2_application(id, opts = {})
      user_delete_o_auth2_application_with_http_info(id, opts)
      nil
    end

    # delete an OAuth2 Application
    # @param id [Integer] token to be deleted
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def user_delete_o_auth2_application_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.user_delete_o_auth2_application ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UserApi.user_delete_o_auth2_application"
      end
      # resource path
      local_var_path = '/user/applications/oauth2/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token']

      new_options = opts.merge(
        :operation => :"UserApi.user_delete_o_auth2_application",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#user_delete_o_auth2_application\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a user
    # @param username [String] username of user to get
    # @param [Hash] opts the optional parameters
    # @return [User]
    def user_get(username, opts = {})
      data, _status_code, _headers = user_get_with_http_info(username, opts)
      data
    end

    # Get a user
    # @param username [String] username of user to get
    # @param [Hash] opts the optional parameters
    # @return [Array<(User, Integer, Hash)>] User data, response status code and response headers
    def user_get_with_http_info(username, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.user_get ...'
      end
      # verify the required parameter 'username' is set
      if @api_client.config.client_side_validation && username.nil?
        fail ArgumentError, "Missing the required parameter 'username' when calling UserApi.user_get"
      end
      # resource path
      local_var_path = '/users/{username}'.sub('{' + 'username' + '}', CGI.escape(username.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'User'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token']

      new_options = opts.merge(
        :operation => :"UserApi.user_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#user_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the authenticated user
    # @param [Hash] opts the optional parameters
    # @return [User]
    def user_get_current(opts = {})
      data, _status_code, _headers = user_get_current_with_http_info(opts)
      data
    end

    # Get the authenticated user
    # @param [Hash] opts the optional parameters
    # @return [Array<(User, Integer, Hash)>] User data, response status code and response headers
    def user_get_current_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.user_get_current ...'
      end
      # resource path
      local_var_path = '/user'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'User'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token']

      new_options = opts.merge(
        :operation => :"UserApi.user_get_current",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#user_get_current\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a user's heatmap
    # @param username [String] username of user to get
    # @param [Hash] opts the optional parameters
    # @return [Array<UserHeatmapData>]
    def user_get_heatmap_data(username, opts = {})
      data, _status_code, _headers = user_get_heatmap_data_with_http_info(username, opts)
      data
    end

    # Get a user&#39;s heatmap
    # @param username [String] username of user to get
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<UserHeatmapData>, Integer, Hash)>] Array<UserHeatmapData> data, response status code and response headers
    def user_get_heatmap_data_with_http_info(username, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.user_get_heatmap_data ...'
      end
      # verify the required parameter 'username' is set
      if @api_client.config.client_side_validation && username.nil?
        fail ArgumentError, "Missing the required parameter 'username' when calling UserApi.user_get_heatmap_data"
      end
      # resource path
      local_var_path = '/users/{username}/heatmap'.sub('{' + 'username' + '}', CGI.escape(username.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<UserHeatmapData>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token']

      new_options = opts.merge(
        :operation => :"UserApi.user_get_heatmap_data",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#user_get_heatmap_data\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # get an OAuth2 Application
    # @param id [Integer] Application ID to be found
    # @param [Hash] opts the optional parameters
    # @return [OAuth2Application]
    def user_get_o_auth2_application(id, opts = {})
      data, _status_code, _headers = user_get_o_auth2_application_with_http_info(id, opts)
      data
    end

    # get an OAuth2 Application
    # @param id [Integer] Application ID to be found
    # @param [Hash] opts the optional parameters
    # @return [Array<(OAuth2Application, Integer, Hash)>] OAuth2Application data, response status code and response headers
    def user_get_o_auth2_application_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.user_get_o_auth2_application ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UserApi.user_get_o_auth2_application"
      end
      # resource path
      local_var_path = '/user/applications/oauth2/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OAuth2Application'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token']

      new_options = opts.merge(
        :operation => :"UserApi.user_get_o_auth2_application",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#user_get_o_auth2_application\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List the authenticated user's oauth2 applications
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page page number of results to return (1-based)
    # @option opts [Integer] :limit page size of results
    # @return [Array<OAuth2Application>]
    def user_get_oauth2_application(opts = {})
      data, _status_code, _headers = user_get_oauth2_application_with_http_info(opts)
      data
    end

    # List the authenticated user&#39;s oauth2 applications
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page page number of results to return (1-based)
    # @option opts [Integer] :limit page size of results
    # @return [Array<(Array<OAuth2Application>, Integer, Hash)>] Array<OAuth2Application> data, response status code and response headers
    def user_get_oauth2_application_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.user_get_oauth2_application ...'
      end
      # resource path
      local_var_path = '/user/applications/oauth2'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<OAuth2Application>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token']

      new_options = opts.merge(
        :operation => :"UserApi.user_get_oauth2_application",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#user_get_oauth2_application\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get list of all existing stopwatches
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page page number of results to return (1-based)
    # @option opts [Integer] :limit page size of results
    # @return [Array<StopWatch>]
    def user_get_stop_watches(opts = {})
      data, _status_code, _headers = user_get_stop_watches_with_http_info(opts)
      data
    end

    # Get list of all existing stopwatches
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page page number of results to return (1-based)
    # @option opts [Integer] :limit page size of results
    # @return [Array<(Array<StopWatch>, Integer, Hash)>] Array<StopWatch> data, response status code and response headers
    def user_get_stop_watches_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.user_get_stop_watches ...'
      end
      # resource path
      local_var_path = '/user/stopwatches'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<StopWatch>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token']

      new_options = opts.merge(
        :operation => :"UserApi.user_get_stop_watches",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#user_get_stop_watches\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List the authenticated user's access tokens
    # @param username [String] username of user
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page page number of results to return (1-based)
    # @option opts [Integer] :limit page size of results
    # @return [Array<AccessToken>]
    def user_get_tokens(username, opts = {})
      data, _status_code, _headers = user_get_tokens_with_http_info(username, opts)
      data
    end

    # List the authenticated user&#39;s access tokens
    # @param username [String] username of user
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page page number of results to return (1-based)
    # @option opts [Integer] :limit page size of results
    # @return [Array<(Array<AccessToken>, Integer, Hash)>] Array<AccessToken> data, response status code and response headers
    def user_get_tokens_with_http_info(username, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.user_get_tokens ...'
      end
      # verify the required parameter 'username' is set
      if @api_client.config.client_side_validation && username.nil?
        fail ArgumentError, "Missing the required parameter 'username' when calling UserApi.user_get_tokens"
      end
      # resource path
      local_var_path = '/users/{username}/tokens'.sub('{' + 'username' + '}', CGI.escape(username.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<AccessToken>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token']

      new_options = opts.merge(
        :operation => :"UserApi.user_get_tokens",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#user_get_tokens\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List the authenticated user's email addresses
    # @param [Hash] opts the optional parameters
    # @return [Array<Email>]
    def user_list_emails(opts = {})
      data, _status_code, _headers = user_list_emails_with_http_info(opts)
      data
    end

    # List the authenticated user&#39;s email addresses
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Email>, Integer, Hash)>] Array<Email> data, response status code and response headers
    def user_list_emails_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.user_list_emails ...'
      end
      # resource path
      local_var_path = '/user/emails'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Email>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token']

      new_options = opts.merge(
        :operation => :"UserApi.user_list_emails",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#user_list_emails\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List the given user's followers
    # @param username [String] username of user
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page page number of results to return (1-based)
    # @option opts [Integer] :limit page size of results
    # @return [Array<User>]
    def user_list_followers(username, opts = {})
      data, _status_code, _headers = user_list_followers_with_http_info(username, opts)
      data
    end

    # List the given user&#39;s followers
    # @param username [String] username of user
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page page number of results to return (1-based)
    # @option opts [Integer] :limit page size of results
    # @return [Array<(Array<User>, Integer, Hash)>] Array<User> data, response status code and response headers
    def user_list_followers_with_http_info(username, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.user_list_followers ...'
      end
      # verify the required parameter 'username' is set
      if @api_client.config.client_side_validation && username.nil?
        fail ArgumentError, "Missing the required parameter 'username' when calling UserApi.user_list_followers"
      end
      # resource path
      local_var_path = '/users/{username}/followers'.sub('{' + 'username' + '}', CGI.escape(username.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<User>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token']

      new_options = opts.merge(
        :operation => :"UserApi.user_list_followers",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#user_list_followers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List the users that the given user is following
    # @param username [String] username of user
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page page number of results to return (1-based)
    # @option opts [Integer] :limit page size of results
    # @return [Array<User>]
    def user_list_following(username, opts = {})
      data, _status_code, _headers = user_list_following_with_http_info(username, opts)
      data
    end

    # List the users that the given user is following
    # @param username [String] username of user
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page page number of results to return (1-based)
    # @option opts [Integer] :limit page size of results
    # @return [Array<(Array<User>, Integer, Hash)>] Array<User> data, response status code and response headers
    def user_list_following_with_http_info(username, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.user_list_following ...'
      end
      # verify the required parameter 'username' is set
      if @api_client.config.client_side_validation && username.nil?
        fail ArgumentError, "Missing the required parameter 'username' when calling UserApi.user_list_following"
      end
      # resource path
      local_var_path = '/users/{username}/following'.sub('{' + 'username' + '}', CGI.escape(username.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<User>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token']

      new_options = opts.merge(
        :operation => :"UserApi.user_list_following",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#user_list_following\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List the given user's GPG keys
    # @param username [String] username of user
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page page number of results to return (1-based)
    # @option opts [Integer] :limit page size of results
    # @return [Array<GPGKey>]
    def user_list_gpg_keys(username, opts = {})
      data, _status_code, _headers = user_list_gpg_keys_with_http_info(username, opts)
      data
    end

    # List the given user&#39;s GPG keys
    # @param username [String] username of user
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page page number of results to return (1-based)
    # @option opts [Integer] :limit page size of results
    # @return [Array<(Array<GPGKey>, Integer, Hash)>] Array<GPGKey> data, response status code and response headers
    def user_list_gpg_keys_with_http_info(username, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.user_list_gpg_keys ...'
      end
      # verify the required parameter 'username' is set
      if @api_client.config.client_side_validation && username.nil?
        fail ArgumentError, "Missing the required parameter 'username' when calling UserApi.user_list_gpg_keys"
      end
      # resource path
      local_var_path = '/users/{username}/gpg_keys'.sub('{' + 'username' + '}', CGI.escape(username.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<GPGKey>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token']

      new_options = opts.merge(
        :operation => :"UserApi.user_list_gpg_keys",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#user_list_gpg_keys\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List the given user's public keys
    # @param username [String] username of user
    # @param [Hash] opts the optional parameters
    # @option opts [String] :fingerprint fingerprint of the key
    # @option opts [Integer] :page page number of results to return (1-based)
    # @option opts [Integer] :limit page size of results
    # @return [Array<PublicKey>]
    def user_list_keys(username, opts = {})
      data, _status_code, _headers = user_list_keys_with_http_info(username, opts)
      data
    end

    # List the given user&#39;s public keys
    # @param username [String] username of user
    # @param [Hash] opts the optional parameters
    # @option opts [String] :fingerprint fingerprint of the key
    # @option opts [Integer] :page page number of results to return (1-based)
    # @option opts [Integer] :limit page size of results
    # @return [Array<(Array<PublicKey>, Integer, Hash)>] Array<PublicKey> data, response status code and response headers
    def user_list_keys_with_http_info(username, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.user_list_keys ...'
      end
      # verify the required parameter 'username' is set
      if @api_client.config.client_side_validation && username.nil?
        fail ArgumentError, "Missing the required parameter 'username' when calling UserApi.user_list_keys"
      end
      # resource path
      local_var_path = '/users/{username}/keys'.sub('{' + 'username' + '}', CGI.escape(username.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'fingerprint'] = opts[:'fingerprint'] if !opts[:'fingerprint'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<PublicKey>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token']

      new_options = opts.merge(
        :operation => :"UserApi.user_list_keys",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#user_list_keys\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List the repos owned by the given user
    # @param username [String] username of user
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page page number of results to return (1-based)
    # @option opts [Integer] :limit page size of results
    # @return [Array<Repository>]
    def user_list_repos(username, opts = {})
      data, _status_code, _headers = user_list_repos_with_http_info(username, opts)
      data
    end

    # List the repos owned by the given user
    # @param username [String] username of user
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page page number of results to return (1-based)
    # @option opts [Integer] :limit page size of results
    # @return [Array<(Array<Repository>, Integer, Hash)>] Array<Repository> data, response status code and response headers
    def user_list_repos_with_http_info(username, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.user_list_repos ...'
      end
      # verify the required parameter 'username' is set
      if @api_client.config.client_side_validation && username.nil?
        fail ArgumentError, "Missing the required parameter 'username' when calling UserApi.user_list_repos"
      end
      # resource path
      local_var_path = '/users/{username}/repos'.sub('{' + 'username' + '}', CGI.escape(username.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Repository>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token']

      new_options = opts.merge(
        :operation => :"UserApi.user_list_repos",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#user_list_repos\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # The repos that the given user has starred
    # @param username [String] username of user
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page page number of results to return (1-based)
    # @option opts [Integer] :limit page size of results
    # @return [Array<Repository>]
    def user_list_starred(username, opts = {})
      data, _status_code, _headers = user_list_starred_with_http_info(username, opts)
      data
    end

    # The repos that the given user has starred
    # @param username [String] username of user
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page page number of results to return (1-based)
    # @option opts [Integer] :limit page size of results
    # @return [Array<(Array<Repository>, Integer, Hash)>] Array<Repository> data, response status code and response headers
    def user_list_starred_with_http_info(username, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.user_list_starred ...'
      end
      # verify the required parameter 'username' is set
      if @api_client.config.client_side_validation && username.nil?
        fail ArgumentError, "Missing the required parameter 'username' when calling UserApi.user_list_starred"
      end
      # resource path
      local_var_path = '/users/{username}/starred'.sub('{' + 'username' + '}', CGI.escape(username.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Repository>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token']

      new_options = opts.merge(
        :operation => :"UserApi.user_list_starred",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#user_list_starred\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List the repositories watched by a user
    # @param username [String] username of the user
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page page number of results to return (1-based)
    # @option opts [Integer] :limit page size of results
    # @return [Array<Repository>]
    def user_list_subscriptions(username, opts = {})
      data, _status_code, _headers = user_list_subscriptions_with_http_info(username, opts)
      data
    end

    # List the repositories watched by a user
    # @param username [String] username of the user
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page page number of results to return (1-based)
    # @option opts [Integer] :limit page size of results
    # @return [Array<(Array<Repository>, Integer, Hash)>] Array<Repository> data, response status code and response headers
    def user_list_subscriptions_with_http_info(username, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.user_list_subscriptions ...'
      end
      # verify the required parameter 'username' is set
      if @api_client.config.client_side_validation && username.nil?
        fail ArgumentError, "Missing the required parameter 'username' when calling UserApi.user_list_subscriptions"
      end
      # resource path
      local_var_path = '/users/{username}/subscriptions'.sub('{' + 'username' + '}', CGI.escape(username.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Repository>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token']

      new_options = opts.merge(
        :operation => :"UserApi.user_list_subscriptions",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#user_list_subscriptions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List all the teams a user belongs to
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page page number of results to return (1-based)
    # @option opts [Integer] :limit page size of results
    # @return [Array<Team>]
    def user_list_teams(opts = {})
      data, _status_code, _headers = user_list_teams_with_http_info(opts)
      data
    end

    # List all the teams a user belongs to
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page page number of results to return (1-based)
    # @option opts [Integer] :limit page size of results
    # @return [Array<(Array<Team>, Integer, Hash)>] Array<Team> data, response status code and response headers
    def user_list_teams_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.user_list_teams ...'
      end
      # resource path
      local_var_path = '/user/teams'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Team>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token']

      new_options = opts.merge(
        :operation => :"UserApi.user_list_teams",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#user_list_teams\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Search for users
    # @param [Hash] opts the optional parameters
    # @option opts [String] :q keyword
    # @option opts [Integer] :uid ID of the user to search for
    # @option opts [Integer] :page page number of results to return (1-based)
    # @option opts [Integer] :limit page size of results
    # @return [InlineResponse2001]
    def user_search(opts = {})
      data, _status_code, _headers = user_search_with_http_info(opts)
      data
    end

    # Search for users
    # @param [Hash] opts the optional parameters
    # @option opts [String] :q keyword
    # @option opts [Integer] :uid ID of the user to search for
    # @option opts [Integer] :page page number of results to return (1-based)
    # @option opts [Integer] :limit page size of results
    # @return [Array<(InlineResponse2001, Integer, Hash)>] InlineResponse2001 data, response status code and response headers
    def user_search_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.user_search ...'
      end
      # resource path
      local_var_path = '/users/search'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'q'] = opts[:'q'] if !opts[:'q'].nil?
      query_params[:'uid'] = opts[:'uid'] if !opts[:'uid'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'InlineResponse2001'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token']

      new_options = opts.merge(
        :operation => :"UserApi.user_search",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#user_search\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # update an OAuth2 Application, this includes regenerating the client secret
    # @param id [Integer] application to be updated
    # @param body [CreateOAuth2ApplicationOptions] 
    # @param [Hash] opts the optional parameters
    # @return [OAuth2Application]
    def user_update_o_auth2_application(id, body, opts = {})
      data, _status_code, _headers = user_update_o_auth2_application_with_http_info(id, body, opts)
      data
    end

    # update an OAuth2 Application, this includes regenerating the client secret
    # @param id [Integer] application to be updated
    # @param body [CreateOAuth2ApplicationOptions] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(OAuth2Application, Integer, Hash)>] OAuth2Application data, response status code and response headers
    def user_update_o_auth2_application_with_http_info(id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.user_update_o_auth2_application ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UserApi.user_update_o_auth2_application"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling UserApi.user_update_o_auth2_application"
      end
      # resource path
      local_var_path = '/user/applications/oauth2/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/plain'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'OAuth2Application'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token']

      new_options = opts.merge(
        :operation => :"UserApi.user_update_o_auth2_application",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#user_update_o_auth2_application\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Verify a GPG key
    # @param [Hash] opts the optional parameters
    # @return [GPGKey]
    def user_verify_gpg_key(opts = {})
      data, _status_code, _headers = user_verify_gpg_key_with_http_info(opts)
      data
    end

    # Verify a GPG key
    # @param [Hash] opts the optional parameters
    # @return [Array<(GPGKey, Integer, Hash)>] GPGKey data, response status code and response headers
    def user_verify_gpg_key_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.user_verify_gpg_key ...'
      end
      # resource path
      local_var_path = '/user/gpg_key_verify'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GPGKey'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token']

      new_options = opts.merge(
        :operation => :"UserApi.user_verify_gpg_key",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#user_verify_gpg_key\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
