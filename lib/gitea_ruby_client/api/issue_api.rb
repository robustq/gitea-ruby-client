=begin
#Gitea API.

#This documentation describes the Gitea API.

The version of the OpenAPI document: {{AppVer | JSEscape | Safe}}

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.4.0

=end

require 'cgi'

module GiteaRubyClient
  class IssueApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Add a label to an issue
    # @param owner [String] owner of the repo
    # @param repo [String] name of the repo
    # @param index [Integer] index of the issue
    # @param [Hash] opts the optional parameters
    # @option opts [IssueLabelsOption] :body 
    # @return [Array<Label>]
    def issue_add_label(owner, repo, index, opts = {})
      data, _status_code, _headers = issue_add_label_with_http_info(owner, repo, index, opts)
      data
    end

    # Add a label to an issue
    # @param owner [String] owner of the repo
    # @param repo [String] name of the repo
    # @param index [Integer] index of the issue
    # @param [Hash] opts the optional parameters
    # @option opts [IssueLabelsOption] :body 
    # @return [Array<(Array<Label>, Integer, Hash)>] Array<Label> data, response status code and response headers
    def issue_add_label_with_http_info(owner, repo, index, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IssueApi.issue_add_label ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling IssueApi.issue_add_label"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling IssueApi.issue_add_label"
      end
      # verify the required parameter 'index' is set
      if @api_client.config.client_side_validation && index.nil?
        fail ArgumentError, "Missing the required parameter 'index' when calling IssueApi.issue_add_label"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/issues/{index}/labels'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'index' + '}', CGI.escape(index.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'body'])

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Label>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token']

      new_options = opts.merge(
        :operation => :"IssueApi.issue_add_label",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IssueApi#issue_add_label\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Subscribe user to issue
    # @param owner [String] owner of the repo
    # @param repo [String] name of the repo
    # @param index [Integer] index of the issue
    # @param user [String] user to subscribe
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def issue_add_subscription(owner, repo, index, user, opts = {})
      issue_add_subscription_with_http_info(owner, repo, index, user, opts)
      nil
    end

    # Subscribe user to issue
    # @param owner [String] owner of the repo
    # @param repo [String] name of the repo
    # @param index [Integer] index of the issue
    # @param user [String] user to subscribe
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def issue_add_subscription_with_http_info(owner, repo, index, user, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IssueApi.issue_add_subscription ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling IssueApi.issue_add_subscription"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling IssueApi.issue_add_subscription"
      end
      # verify the required parameter 'index' is set
      if @api_client.config.client_side_validation && index.nil?
        fail ArgumentError, "Missing the required parameter 'index' when calling IssueApi.issue_add_subscription"
      end
      # verify the required parameter 'user' is set
      if @api_client.config.client_side_validation && user.nil?
        fail ArgumentError, "Missing the required parameter 'user' when calling IssueApi.issue_add_subscription"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/issues/{index}/subscriptions/{user}'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'index' + '}', CGI.escape(index.to_s)).sub('{' + 'user' + '}', CGI.escape(user.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token']

      new_options = opts.merge(
        :operation => :"IssueApi.issue_add_subscription",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IssueApi#issue_add_subscription\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add tracked time to a issue
    # @param owner [String] owner of the repo
    # @param repo [String] name of the repo
    # @param index [Integer] index of the issue
    # @param [Hash] opts the optional parameters
    # @option opts [AddTimeOption] :body 
    # @return [TrackedTime]
    def issue_add_time(owner, repo, index, opts = {})
      data, _status_code, _headers = issue_add_time_with_http_info(owner, repo, index, opts)
      data
    end

    # Add tracked time to a issue
    # @param owner [String] owner of the repo
    # @param repo [String] name of the repo
    # @param index [Integer] index of the issue
    # @param [Hash] opts the optional parameters
    # @option opts [AddTimeOption] :body 
    # @return [Array<(TrackedTime, Integer, Hash)>] TrackedTime data, response status code and response headers
    def issue_add_time_with_http_info(owner, repo, index, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IssueApi.issue_add_time ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling IssueApi.issue_add_time"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling IssueApi.issue_add_time"
      end
      # verify the required parameter 'index' is set
      if @api_client.config.client_side_validation && index.nil?
        fail ArgumentError, "Missing the required parameter 'index' when calling IssueApi.issue_add_time"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/issues/{index}/times'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'index' + '}', CGI.escape(index.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'body'])

      # return_type
      return_type = opts[:debug_return_type] || 'TrackedTime'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token']

      new_options = opts.merge(
        :operation => :"IssueApi.issue_add_time",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IssueApi#issue_add_time\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Check if user is subscribed to an issue
    # @param owner [String] owner of the repo
    # @param repo [String] name of the repo
    # @param index [Integer] index of the issue
    # @param [Hash] opts the optional parameters
    # @return [WatchInfo]
    def issue_check_subscription(owner, repo, index, opts = {})
      data, _status_code, _headers = issue_check_subscription_with_http_info(owner, repo, index, opts)
      data
    end

    # Check if user is subscribed to an issue
    # @param owner [String] owner of the repo
    # @param repo [String] name of the repo
    # @param index [Integer] index of the issue
    # @param [Hash] opts the optional parameters
    # @return [Array<(WatchInfo, Integer, Hash)>] WatchInfo data, response status code and response headers
    def issue_check_subscription_with_http_info(owner, repo, index, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IssueApi.issue_check_subscription ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling IssueApi.issue_check_subscription"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling IssueApi.issue_check_subscription"
      end
      # verify the required parameter 'index' is set
      if @api_client.config.client_side_validation && index.nil?
        fail ArgumentError, "Missing the required parameter 'index' when calling IssueApi.issue_check_subscription"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/issues/{index}/subscriptions/check'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'index' + '}', CGI.escape(index.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'WatchInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token']

      new_options = opts.merge(
        :operation => :"IssueApi.issue_check_subscription",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IssueApi#issue_check_subscription\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove all labels from an issue
    # @param owner [String] owner of the repo
    # @param repo [String] name of the repo
    # @param index [Integer] index of the issue
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def issue_clear_labels(owner, repo, index, opts = {})
      issue_clear_labels_with_http_info(owner, repo, index, opts)
      nil
    end

    # Remove all labels from an issue
    # @param owner [String] owner of the repo
    # @param repo [String] name of the repo
    # @param index [Integer] index of the issue
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def issue_clear_labels_with_http_info(owner, repo, index, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IssueApi.issue_clear_labels ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling IssueApi.issue_clear_labels"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling IssueApi.issue_clear_labels"
      end
      # verify the required parameter 'index' is set
      if @api_client.config.client_side_validation && index.nil?
        fail ArgumentError, "Missing the required parameter 'index' when calling IssueApi.issue_clear_labels"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/issues/{index}/labels'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'index' + '}', CGI.escape(index.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token']

      new_options = opts.merge(
        :operation => :"IssueApi.issue_clear_labels",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IssueApi#issue_clear_labels\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add a comment to an issue
    # @param owner [String] owner of the repo
    # @param repo [String] name of the repo
    # @param index [Integer] index of the issue
    # @param [Hash] opts the optional parameters
    # @option opts [CreateIssueCommentOption] :body 
    # @return [Comment]
    def issue_create_comment(owner, repo, index, opts = {})
      data, _status_code, _headers = issue_create_comment_with_http_info(owner, repo, index, opts)
      data
    end

    # Add a comment to an issue
    # @param owner [String] owner of the repo
    # @param repo [String] name of the repo
    # @param index [Integer] index of the issue
    # @param [Hash] opts the optional parameters
    # @option opts [CreateIssueCommentOption] :body 
    # @return [Array<(Comment, Integer, Hash)>] Comment data, response status code and response headers
    def issue_create_comment_with_http_info(owner, repo, index, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IssueApi.issue_create_comment ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling IssueApi.issue_create_comment"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling IssueApi.issue_create_comment"
      end
      # verify the required parameter 'index' is set
      if @api_client.config.client_side_validation && index.nil?
        fail ArgumentError, "Missing the required parameter 'index' when calling IssueApi.issue_create_comment"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/issues/{index}/comments'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'index' + '}', CGI.escape(index.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'body'])

      # return_type
      return_type = opts[:debug_return_type] || 'Comment'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token']

      new_options = opts.merge(
        :operation => :"IssueApi.issue_create_comment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IssueApi#issue_create_comment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create an issue. If using deadline only the date will be taken into account, and time of day ignored.
    # @param owner [String] owner of the repo
    # @param repo [String] name of the repo
    # @param [Hash] opts the optional parameters
    # @option opts [CreateIssueOption] :body 
    # @return [Issue]
    def issue_create_issue(owner, repo, opts = {})
      data, _status_code, _headers = issue_create_issue_with_http_info(owner, repo, opts)
      data
    end

    # Create an issue. If using deadline only the date will be taken into account, and time of day ignored.
    # @param owner [String] owner of the repo
    # @param repo [String] name of the repo
    # @param [Hash] opts the optional parameters
    # @option opts [CreateIssueOption] :body 
    # @return [Array<(Issue, Integer, Hash)>] Issue data, response status code and response headers
    def issue_create_issue_with_http_info(owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IssueApi.issue_create_issue ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling IssueApi.issue_create_issue"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling IssueApi.issue_create_issue"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/issues'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'body'])

      # return_type
      return_type = opts[:debug_return_type] || 'Issue'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token']

      new_options = opts.merge(
        :operation => :"IssueApi.issue_create_issue",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IssueApi#issue_create_issue\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a label
    # @param owner [String] owner of the repo
    # @param repo [String] name of the repo
    # @param [Hash] opts the optional parameters
    # @option opts [CreateLabelOption] :body 
    # @return [Label]
    def issue_create_label(owner, repo, opts = {})
      data, _status_code, _headers = issue_create_label_with_http_info(owner, repo, opts)
      data
    end

    # Create a label
    # @param owner [String] owner of the repo
    # @param repo [String] name of the repo
    # @param [Hash] opts the optional parameters
    # @option opts [CreateLabelOption] :body 
    # @return [Array<(Label, Integer, Hash)>] Label data, response status code and response headers
    def issue_create_label_with_http_info(owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IssueApi.issue_create_label ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling IssueApi.issue_create_label"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling IssueApi.issue_create_label"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/labels'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'body'])

      # return_type
      return_type = opts[:debug_return_type] || 'Label'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token']

      new_options = opts.merge(
        :operation => :"IssueApi.issue_create_label",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IssueApi#issue_create_label\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a milestone
    # @param owner [String] owner of the repo
    # @param repo [String] name of the repo
    # @param [Hash] opts the optional parameters
    # @option opts [CreateMilestoneOption] :body 
    # @return [Milestone]
    def issue_create_milestone(owner, repo, opts = {})
      data, _status_code, _headers = issue_create_milestone_with_http_info(owner, repo, opts)
      data
    end

    # Create a milestone
    # @param owner [String] owner of the repo
    # @param repo [String] name of the repo
    # @param [Hash] opts the optional parameters
    # @option opts [CreateMilestoneOption] :body 
    # @return [Array<(Milestone, Integer, Hash)>] Milestone data, response status code and response headers
    def issue_create_milestone_with_http_info(owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IssueApi.issue_create_milestone ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling IssueApi.issue_create_milestone"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling IssueApi.issue_create_milestone"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/milestones'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'body'])

      # return_type
      return_type = opts[:debug_return_type] || 'Milestone'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token']

      new_options = opts.merge(
        :operation => :"IssueApi.issue_create_milestone",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IssueApi#issue_create_milestone\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete an issue
    # @param owner [String] owner of the repo
    # @param repo [String] name of the repo
    # @param index [Integer] index of issue to delete
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def issue_delete(owner, repo, index, opts = {})
      issue_delete_with_http_info(owner, repo, index, opts)
      nil
    end

    # Delete an issue
    # @param owner [String] owner of the repo
    # @param repo [String] name of the repo
    # @param index [Integer] index of issue to delete
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def issue_delete_with_http_info(owner, repo, index, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IssueApi.issue_delete ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling IssueApi.issue_delete"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling IssueApi.issue_delete"
      end
      # verify the required parameter 'index' is set
      if @api_client.config.client_side_validation && index.nil?
        fail ArgumentError, "Missing the required parameter 'index' when calling IssueApi.issue_delete"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/issues/{index}'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'index' + '}', CGI.escape(index.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token']

      new_options = opts.merge(
        :operation => :"IssueApi.issue_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IssueApi#issue_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a comment
    # @param owner [String] owner of the repo
    # @param repo [String] name of the repo
    # @param id [Integer] id of comment to delete
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def issue_delete_comment(owner, repo, id, opts = {})
      issue_delete_comment_with_http_info(owner, repo, id, opts)
      nil
    end

    # Delete a comment
    # @param owner [String] owner of the repo
    # @param repo [String] name of the repo
    # @param id [Integer] id of comment to delete
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def issue_delete_comment_with_http_info(owner, repo, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IssueApi.issue_delete_comment ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling IssueApi.issue_delete_comment"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling IssueApi.issue_delete_comment"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling IssueApi.issue_delete_comment"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/issues/comments/{id}'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token']

      new_options = opts.merge(
        :operation => :"IssueApi.issue_delete_comment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IssueApi#issue_delete_comment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a comment
    # @param owner [String] owner of the repo
    # @param repo [String] name of the repo
    # @param index [Integer] this parameter is ignored
    # @param id [Integer] id of comment to delete
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def issue_delete_comment_deprecated(owner, repo, index, id, opts = {})
      issue_delete_comment_deprecated_with_http_info(owner, repo, index, id, opts)
      nil
    end

    # Delete a comment
    # @param owner [String] owner of the repo
    # @param repo [String] name of the repo
    # @param index [Integer] this parameter is ignored
    # @param id [Integer] id of comment to delete
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def issue_delete_comment_deprecated_with_http_info(owner, repo, index, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IssueApi.issue_delete_comment_deprecated ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling IssueApi.issue_delete_comment_deprecated"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling IssueApi.issue_delete_comment_deprecated"
      end
      # verify the required parameter 'index' is set
      if @api_client.config.client_side_validation && index.nil?
        fail ArgumentError, "Missing the required parameter 'index' when calling IssueApi.issue_delete_comment_deprecated"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling IssueApi.issue_delete_comment_deprecated"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/issues/{index}/comments/{id}'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'index' + '}', CGI.escape(index.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token']

      new_options = opts.merge(
        :operation => :"IssueApi.issue_delete_comment_deprecated",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IssueApi#issue_delete_comment_deprecated\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove a reaction from a comment of an issue
    # @param owner [String] owner of the repo
    # @param repo [String] name of the repo
    # @param id [Integer] id of the comment to edit
    # @param [Hash] opts the optional parameters
    # @option opts [EditReactionOption] :content 
    # @return [nil]
    def issue_delete_comment_reaction(owner, repo, id, opts = {})
      issue_delete_comment_reaction_with_http_info(owner, repo, id, opts)
      nil
    end

    # Remove a reaction from a comment of an issue
    # @param owner [String] owner of the repo
    # @param repo [String] name of the repo
    # @param id [Integer] id of the comment to edit
    # @param [Hash] opts the optional parameters
    # @option opts [EditReactionOption] :content 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def issue_delete_comment_reaction_with_http_info(owner, repo, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IssueApi.issue_delete_comment_reaction ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling IssueApi.issue_delete_comment_reaction"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling IssueApi.issue_delete_comment_reaction"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling IssueApi.issue_delete_comment_reaction"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/issues/comments/{id}/reactions'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'content'])

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token']

      new_options = opts.merge(
        :operation => :"IssueApi.issue_delete_comment_reaction",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IssueApi#issue_delete_comment_reaction\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove a reaction from an issue
    # @param owner [String] owner of the repo
    # @param repo [String] name of the repo
    # @param index [Integer] index of the issue
    # @param [Hash] opts the optional parameters
    # @option opts [EditReactionOption] :content 
    # @return [nil]
    def issue_delete_issue_reaction(owner, repo, index, opts = {})
      issue_delete_issue_reaction_with_http_info(owner, repo, index, opts)
      nil
    end

    # Remove a reaction from an issue
    # @param owner [String] owner of the repo
    # @param repo [String] name of the repo
    # @param index [Integer] index of the issue
    # @param [Hash] opts the optional parameters
    # @option opts [EditReactionOption] :content 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def issue_delete_issue_reaction_with_http_info(owner, repo, index, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IssueApi.issue_delete_issue_reaction ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling IssueApi.issue_delete_issue_reaction"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling IssueApi.issue_delete_issue_reaction"
      end
      # verify the required parameter 'index' is set
      if @api_client.config.client_side_validation && index.nil?
        fail ArgumentError, "Missing the required parameter 'index' when calling IssueApi.issue_delete_issue_reaction"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/issues/{index}/reactions'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'index' + '}', CGI.escape(index.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'content'])

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token']

      new_options = opts.merge(
        :operation => :"IssueApi.issue_delete_issue_reaction",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IssueApi#issue_delete_issue_reaction\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a label
    # @param owner [String] owner of the repo
    # @param repo [String] name of the repo
    # @param id [Integer] id of the label to delete
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def issue_delete_label(owner, repo, id, opts = {})
      issue_delete_label_with_http_info(owner, repo, id, opts)
      nil
    end

    # Delete a label
    # @param owner [String] owner of the repo
    # @param repo [String] name of the repo
    # @param id [Integer] id of the label to delete
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def issue_delete_label_with_http_info(owner, repo, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IssueApi.issue_delete_label ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling IssueApi.issue_delete_label"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling IssueApi.issue_delete_label"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling IssueApi.issue_delete_label"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/labels/{id}'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token']

      new_options = opts.merge(
        :operation => :"IssueApi.issue_delete_label",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IssueApi#issue_delete_label\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a milestone
    # @param owner [String] owner of the repo
    # @param repo [String] name of the repo
    # @param id [String] the milestone to delete, identified by ID and if not available by name
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def issue_delete_milestone(owner, repo, id, opts = {})
      issue_delete_milestone_with_http_info(owner, repo, id, opts)
      nil
    end

    # Delete a milestone
    # @param owner [String] owner of the repo
    # @param repo [String] name of the repo
    # @param id [String] the milestone to delete, identified by ID and if not available by name
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def issue_delete_milestone_with_http_info(owner, repo, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IssueApi.issue_delete_milestone ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling IssueApi.issue_delete_milestone"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling IssueApi.issue_delete_milestone"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling IssueApi.issue_delete_milestone"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/milestones/{id}'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token']

      new_options = opts.merge(
        :operation => :"IssueApi.issue_delete_milestone",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IssueApi#issue_delete_milestone\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete an issue's existing stopwatch.
    # @param owner [String] owner of the repo
    # @param repo [String] name of the repo
    # @param index [Integer] index of the issue to stop the stopwatch on
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def issue_delete_stop_watch(owner, repo, index, opts = {})
      issue_delete_stop_watch_with_http_info(owner, repo, index, opts)
      nil
    end

    # Delete an issue&#39;s existing stopwatch.
    # @param owner [String] owner of the repo
    # @param repo [String] name of the repo
    # @param index [Integer] index of the issue to stop the stopwatch on
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def issue_delete_stop_watch_with_http_info(owner, repo, index, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IssueApi.issue_delete_stop_watch ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling IssueApi.issue_delete_stop_watch"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling IssueApi.issue_delete_stop_watch"
      end
      # verify the required parameter 'index' is set
      if @api_client.config.client_side_validation && index.nil?
        fail ArgumentError, "Missing the required parameter 'index' when calling IssueApi.issue_delete_stop_watch"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/issues/{index}/stopwatch/delete'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'index' + '}', CGI.escape(index.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token']

      new_options = opts.merge(
        :operation => :"IssueApi.issue_delete_stop_watch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IssueApi#issue_delete_stop_watch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Unsubscribe user from issue
    # @param owner [String] owner of the repo
    # @param repo [String] name of the repo
    # @param index [Integer] index of the issue
    # @param user [String] user witch unsubscribe
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def issue_delete_subscription(owner, repo, index, user, opts = {})
      issue_delete_subscription_with_http_info(owner, repo, index, user, opts)
      nil
    end

    # Unsubscribe user from issue
    # @param owner [String] owner of the repo
    # @param repo [String] name of the repo
    # @param index [Integer] index of the issue
    # @param user [String] user witch unsubscribe
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def issue_delete_subscription_with_http_info(owner, repo, index, user, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IssueApi.issue_delete_subscription ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling IssueApi.issue_delete_subscription"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling IssueApi.issue_delete_subscription"
      end
      # verify the required parameter 'index' is set
      if @api_client.config.client_side_validation && index.nil?
        fail ArgumentError, "Missing the required parameter 'index' when calling IssueApi.issue_delete_subscription"
      end
      # verify the required parameter 'user' is set
      if @api_client.config.client_side_validation && user.nil?
        fail ArgumentError, "Missing the required parameter 'user' when calling IssueApi.issue_delete_subscription"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/issues/{index}/subscriptions/{user}'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'index' + '}', CGI.escape(index.to_s)).sub('{' + 'user' + '}', CGI.escape(user.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token']

      new_options = opts.merge(
        :operation => :"IssueApi.issue_delete_subscription",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IssueApi#issue_delete_subscription\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete specific tracked time
    # @param owner [String] owner of the repo
    # @param repo [String] name of the repo
    # @param index [Integer] index of the issue
    # @param id [Integer] id of time to delete
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def issue_delete_time(owner, repo, index, id, opts = {})
      issue_delete_time_with_http_info(owner, repo, index, id, opts)
      nil
    end

    # Delete specific tracked time
    # @param owner [String] owner of the repo
    # @param repo [String] name of the repo
    # @param index [Integer] index of the issue
    # @param id [Integer] id of time to delete
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def issue_delete_time_with_http_info(owner, repo, index, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IssueApi.issue_delete_time ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling IssueApi.issue_delete_time"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling IssueApi.issue_delete_time"
      end
      # verify the required parameter 'index' is set
      if @api_client.config.client_side_validation && index.nil?
        fail ArgumentError, "Missing the required parameter 'index' when calling IssueApi.issue_delete_time"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling IssueApi.issue_delete_time"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/issues/{index}/times/{id}'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'index' + '}', CGI.escape(index.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token']

      new_options = opts.merge(
        :operation => :"IssueApi.issue_delete_time",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IssueApi#issue_delete_time\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Edit a comment
    # @param owner [String] owner of the repo
    # @param repo [String] name of the repo
    # @param id [Integer] id of the comment to edit
    # @param [Hash] opts the optional parameters
    # @option opts [EditIssueCommentOption] :body 
    # @return [Comment]
    def issue_edit_comment(owner, repo, id, opts = {})
      data, _status_code, _headers = issue_edit_comment_with_http_info(owner, repo, id, opts)
      data
    end

    # Edit a comment
    # @param owner [String] owner of the repo
    # @param repo [String] name of the repo
    # @param id [Integer] id of the comment to edit
    # @param [Hash] opts the optional parameters
    # @option opts [EditIssueCommentOption] :body 
    # @return [Array<(Comment, Integer, Hash)>] Comment data, response status code and response headers
    def issue_edit_comment_with_http_info(owner, repo, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IssueApi.issue_edit_comment ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling IssueApi.issue_edit_comment"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling IssueApi.issue_edit_comment"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling IssueApi.issue_edit_comment"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/issues/comments/{id}'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'body'])

      # return_type
      return_type = opts[:debug_return_type] || 'Comment'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token']

      new_options = opts.merge(
        :operation => :"IssueApi.issue_edit_comment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IssueApi#issue_edit_comment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Edit a comment
    # @param owner [String] owner of the repo
    # @param repo [String] name of the repo
    # @param index [Integer] this parameter is ignored
    # @param id [Integer] id of the comment to edit
    # @param [Hash] opts the optional parameters
    # @option opts [EditIssueCommentOption] :body 
    # @return [Comment]
    def issue_edit_comment_deprecated(owner, repo, index, id, opts = {})
      data, _status_code, _headers = issue_edit_comment_deprecated_with_http_info(owner, repo, index, id, opts)
      data
    end

    # Edit a comment
    # @param owner [String] owner of the repo
    # @param repo [String] name of the repo
    # @param index [Integer] this parameter is ignored
    # @param id [Integer] id of the comment to edit
    # @param [Hash] opts the optional parameters
    # @option opts [EditIssueCommentOption] :body 
    # @return [Array<(Comment, Integer, Hash)>] Comment data, response status code and response headers
    def issue_edit_comment_deprecated_with_http_info(owner, repo, index, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IssueApi.issue_edit_comment_deprecated ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling IssueApi.issue_edit_comment_deprecated"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling IssueApi.issue_edit_comment_deprecated"
      end
      # verify the required parameter 'index' is set
      if @api_client.config.client_side_validation && index.nil?
        fail ArgumentError, "Missing the required parameter 'index' when calling IssueApi.issue_edit_comment_deprecated"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling IssueApi.issue_edit_comment_deprecated"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/issues/{index}/comments/{id}'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'index' + '}', CGI.escape(index.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'body'])

      # return_type
      return_type = opts[:debug_return_type] || 'Comment'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token']

      new_options = opts.merge(
        :operation => :"IssueApi.issue_edit_comment_deprecated",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IssueApi#issue_edit_comment_deprecated\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Edit an issue. If using deadline only the date will be taken into account, and time of day ignored.
    # @param owner [String] owner of the repo
    # @param repo [String] name of the repo
    # @param index [Integer] index of the issue to edit
    # @param [Hash] opts the optional parameters
    # @option opts [EditIssueOption] :body 
    # @return [Issue]
    def issue_edit_issue(owner, repo, index, opts = {})
      data, _status_code, _headers = issue_edit_issue_with_http_info(owner, repo, index, opts)
      data
    end

    # Edit an issue. If using deadline only the date will be taken into account, and time of day ignored.
    # @param owner [String] owner of the repo
    # @param repo [String] name of the repo
    # @param index [Integer] index of the issue to edit
    # @param [Hash] opts the optional parameters
    # @option opts [EditIssueOption] :body 
    # @return [Array<(Issue, Integer, Hash)>] Issue data, response status code and response headers
    def issue_edit_issue_with_http_info(owner, repo, index, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IssueApi.issue_edit_issue ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling IssueApi.issue_edit_issue"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling IssueApi.issue_edit_issue"
      end
      # verify the required parameter 'index' is set
      if @api_client.config.client_side_validation && index.nil?
        fail ArgumentError, "Missing the required parameter 'index' when calling IssueApi.issue_edit_issue"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/issues/{index}'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'index' + '}', CGI.escape(index.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'body'])

      # return_type
      return_type = opts[:debug_return_type] || 'Issue'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token']

      new_options = opts.merge(
        :operation => :"IssueApi.issue_edit_issue",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IssueApi#issue_edit_issue\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set an issue deadline. If set to null, the deadline is deleted. If using deadline only the date will be taken into account, and time of day ignored.
    # @param owner [String] owner of the repo
    # @param repo [String] name of the repo
    # @param index [Integer] index of the issue to create or update a deadline on
    # @param [Hash] opts the optional parameters
    # @option opts [EditDeadlineOption] :body 
    # @return [IssueDeadline]
    def issue_edit_issue_deadline(owner, repo, index, opts = {})
      data, _status_code, _headers = issue_edit_issue_deadline_with_http_info(owner, repo, index, opts)
      data
    end

    # Set an issue deadline. If set to null, the deadline is deleted. If using deadline only the date will be taken into account, and time of day ignored.
    # @param owner [String] owner of the repo
    # @param repo [String] name of the repo
    # @param index [Integer] index of the issue to create or update a deadline on
    # @param [Hash] opts the optional parameters
    # @option opts [EditDeadlineOption] :body 
    # @return [Array<(IssueDeadline, Integer, Hash)>] IssueDeadline data, response status code and response headers
    def issue_edit_issue_deadline_with_http_info(owner, repo, index, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IssueApi.issue_edit_issue_deadline ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling IssueApi.issue_edit_issue_deadline"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling IssueApi.issue_edit_issue_deadline"
      end
      # verify the required parameter 'index' is set
      if @api_client.config.client_side_validation && index.nil?
        fail ArgumentError, "Missing the required parameter 'index' when calling IssueApi.issue_edit_issue_deadline"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/issues/{index}/deadline'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'index' + '}', CGI.escape(index.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'body'])

      # return_type
      return_type = opts[:debug_return_type] || 'IssueDeadline'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token']

      new_options = opts.merge(
        :operation => :"IssueApi.issue_edit_issue_deadline",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IssueApi#issue_edit_issue_deadline\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a label
    # @param owner [String] owner of the repo
    # @param repo [String] name of the repo
    # @param id [Integer] id of the label to edit
    # @param [Hash] opts the optional parameters
    # @option opts [EditLabelOption] :body 
    # @return [Label]
    def issue_edit_label(owner, repo, id, opts = {})
      data, _status_code, _headers = issue_edit_label_with_http_info(owner, repo, id, opts)
      data
    end

    # Update a label
    # @param owner [String] owner of the repo
    # @param repo [String] name of the repo
    # @param id [Integer] id of the label to edit
    # @param [Hash] opts the optional parameters
    # @option opts [EditLabelOption] :body 
    # @return [Array<(Label, Integer, Hash)>] Label data, response status code and response headers
    def issue_edit_label_with_http_info(owner, repo, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IssueApi.issue_edit_label ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling IssueApi.issue_edit_label"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling IssueApi.issue_edit_label"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling IssueApi.issue_edit_label"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/labels/{id}'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'body'])

      # return_type
      return_type = opts[:debug_return_type] || 'Label'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token']

      new_options = opts.merge(
        :operation => :"IssueApi.issue_edit_label",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IssueApi#issue_edit_label\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a milestone
    # @param owner [String] owner of the repo
    # @param repo [String] name of the repo
    # @param id [String] the milestone to edit, identified by ID and if not available by name
    # @param [Hash] opts the optional parameters
    # @option opts [EditMilestoneOption] :body 
    # @return [Milestone]
    def issue_edit_milestone(owner, repo, id, opts = {})
      data, _status_code, _headers = issue_edit_milestone_with_http_info(owner, repo, id, opts)
      data
    end

    # Update a milestone
    # @param owner [String] owner of the repo
    # @param repo [String] name of the repo
    # @param id [String] the milestone to edit, identified by ID and if not available by name
    # @param [Hash] opts the optional parameters
    # @option opts [EditMilestoneOption] :body 
    # @return [Array<(Milestone, Integer, Hash)>] Milestone data, response status code and response headers
    def issue_edit_milestone_with_http_info(owner, repo, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IssueApi.issue_edit_milestone ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling IssueApi.issue_edit_milestone"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling IssueApi.issue_edit_milestone"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling IssueApi.issue_edit_milestone"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/milestones/{id}'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'body'])

      # return_type
      return_type = opts[:debug_return_type] || 'Milestone'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token']

      new_options = opts.merge(
        :operation => :"IssueApi.issue_edit_milestone",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IssueApi#issue_edit_milestone\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a comment
    # @param owner [String] owner of the repo
    # @param repo [String] name of the repo
    # @param id [Integer] id of the comment
    # @param [Hash] opts the optional parameters
    # @return [Comment]
    def issue_get_comment(owner, repo, id, opts = {})
      data, _status_code, _headers = issue_get_comment_with_http_info(owner, repo, id, opts)
      data
    end

    # Get a comment
    # @param owner [String] owner of the repo
    # @param repo [String] name of the repo
    # @param id [Integer] id of the comment
    # @param [Hash] opts the optional parameters
    # @return [Array<(Comment, Integer, Hash)>] Comment data, response status code and response headers
    def issue_get_comment_with_http_info(owner, repo, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IssueApi.issue_get_comment ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling IssueApi.issue_get_comment"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling IssueApi.issue_get_comment"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling IssueApi.issue_get_comment"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/issues/comments/{id}'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Comment'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token']

      new_options = opts.merge(
        :operation => :"IssueApi.issue_get_comment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IssueApi#issue_get_comment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a list of reactions from a comment of an issue
    # @param owner [String] owner of the repo
    # @param repo [String] name of the repo
    # @param id [Integer] id of the comment to edit
    # @param [Hash] opts the optional parameters
    # @return [Array<Reaction>]
    def issue_get_comment_reactions(owner, repo, id, opts = {})
      data, _status_code, _headers = issue_get_comment_reactions_with_http_info(owner, repo, id, opts)
      data
    end

    # Get a list of reactions from a comment of an issue
    # @param owner [String] owner of the repo
    # @param repo [String] name of the repo
    # @param id [Integer] id of the comment to edit
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Reaction>, Integer, Hash)>] Array<Reaction> data, response status code and response headers
    def issue_get_comment_reactions_with_http_info(owner, repo, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IssueApi.issue_get_comment_reactions ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling IssueApi.issue_get_comment_reactions"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling IssueApi.issue_get_comment_reactions"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling IssueApi.issue_get_comment_reactions"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/issues/comments/{id}/reactions'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Reaction>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token']

      new_options = opts.merge(
        :operation => :"IssueApi.issue_get_comment_reactions",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IssueApi#issue_get_comment_reactions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List all comments on an issue
    # @param owner [String] owner of the repo
    # @param repo [String] name of the repo
    # @param index [Integer] index of the issue
    # @param [Hash] opts the optional parameters
    # @option opts [Time] :since if provided, only comments updated since the specified time are returned.
    # @option opts [Time] :before if provided, only comments updated before the provided time are returned.
    # @return [Array<Comment>]
    def issue_get_comments(owner, repo, index, opts = {})
      data, _status_code, _headers = issue_get_comments_with_http_info(owner, repo, index, opts)
      data
    end

    # List all comments on an issue
    # @param owner [String] owner of the repo
    # @param repo [String] name of the repo
    # @param index [Integer] index of the issue
    # @param [Hash] opts the optional parameters
    # @option opts [Time] :since if provided, only comments updated since the specified time are returned.
    # @option opts [Time] :before if provided, only comments updated before the provided time are returned.
    # @return [Array<(Array<Comment>, Integer, Hash)>] Array<Comment> data, response status code and response headers
    def issue_get_comments_with_http_info(owner, repo, index, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IssueApi.issue_get_comments ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling IssueApi.issue_get_comments"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling IssueApi.issue_get_comments"
      end
      # verify the required parameter 'index' is set
      if @api_client.config.client_side_validation && index.nil?
        fail ArgumentError, "Missing the required parameter 'index' when calling IssueApi.issue_get_comments"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/issues/{index}/comments'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'index' + '}', CGI.escape(index.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'since'] = opts[:'since'] if !opts[:'since'].nil?
      query_params[:'before'] = opts[:'before'] if !opts[:'before'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Comment>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token']

      new_options = opts.merge(
        :operation => :"IssueApi.issue_get_comments",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IssueApi#issue_get_comments\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List all comments and events on an issue
    # @param owner [String] owner of the repo
    # @param repo [String] name of the repo
    # @param index [Integer] index of the issue
    # @param [Hash] opts the optional parameters
    # @option opts [Time] :since if provided, only comments updated since the specified time are returned.
    # @option opts [Integer] :page page number of results to return (1-based)
    # @option opts [Integer] :limit page size of results
    # @option opts [Time] :before if provided, only comments updated before the provided time are returned.
    # @return [Array<TimelineComment>]
    def issue_get_comments_and_timeline(owner, repo, index, opts = {})
      data, _status_code, _headers = issue_get_comments_and_timeline_with_http_info(owner, repo, index, opts)
      data
    end

    # List all comments and events on an issue
    # @param owner [String] owner of the repo
    # @param repo [String] name of the repo
    # @param index [Integer] index of the issue
    # @param [Hash] opts the optional parameters
    # @option opts [Time] :since if provided, only comments updated since the specified time are returned.
    # @option opts [Integer] :page page number of results to return (1-based)
    # @option opts [Integer] :limit page size of results
    # @option opts [Time] :before if provided, only comments updated before the provided time are returned.
    # @return [Array<(Array<TimelineComment>, Integer, Hash)>] Array<TimelineComment> data, response status code and response headers
    def issue_get_comments_and_timeline_with_http_info(owner, repo, index, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IssueApi.issue_get_comments_and_timeline ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling IssueApi.issue_get_comments_and_timeline"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling IssueApi.issue_get_comments_and_timeline"
      end
      # verify the required parameter 'index' is set
      if @api_client.config.client_side_validation && index.nil?
        fail ArgumentError, "Missing the required parameter 'index' when calling IssueApi.issue_get_comments_and_timeline"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/issues/{index}/timeline'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'index' + '}', CGI.escape(index.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'since'] = opts[:'since'] if !opts[:'since'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'before'] = opts[:'before'] if !opts[:'before'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<TimelineComment>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token']

      new_options = opts.merge(
        :operation => :"IssueApi.issue_get_comments_and_timeline",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IssueApi#issue_get_comments_and_timeline\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get an issue
    # @param owner [String] owner of the repo
    # @param repo [String] name of the repo
    # @param index [Integer] index of the issue to get
    # @param [Hash] opts the optional parameters
    # @return [Issue]
    def issue_get_issue(owner, repo, index, opts = {})
      data, _status_code, _headers = issue_get_issue_with_http_info(owner, repo, index, opts)
      data
    end

    # Get an issue
    # @param owner [String] owner of the repo
    # @param repo [String] name of the repo
    # @param index [Integer] index of the issue to get
    # @param [Hash] opts the optional parameters
    # @return [Array<(Issue, Integer, Hash)>] Issue data, response status code and response headers
    def issue_get_issue_with_http_info(owner, repo, index, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IssueApi.issue_get_issue ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling IssueApi.issue_get_issue"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling IssueApi.issue_get_issue"
      end
      # verify the required parameter 'index' is set
      if @api_client.config.client_side_validation && index.nil?
        fail ArgumentError, "Missing the required parameter 'index' when calling IssueApi.issue_get_issue"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/issues/{index}'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'index' + '}', CGI.escape(index.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Issue'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token']

      new_options = opts.merge(
        :operation => :"IssueApi.issue_get_issue",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IssueApi#issue_get_issue\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a list reactions of an issue
    # @param owner [String] owner of the repo
    # @param repo [String] name of the repo
    # @param index [Integer] index of the issue
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page page number of results to return (1-based)
    # @option opts [Integer] :limit page size of results
    # @return [Array<Reaction>]
    def issue_get_issue_reactions(owner, repo, index, opts = {})
      data, _status_code, _headers = issue_get_issue_reactions_with_http_info(owner, repo, index, opts)
      data
    end

    # Get a list reactions of an issue
    # @param owner [String] owner of the repo
    # @param repo [String] name of the repo
    # @param index [Integer] index of the issue
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page page number of results to return (1-based)
    # @option opts [Integer] :limit page size of results
    # @return [Array<(Array<Reaction>, Integer, Hash)>] Array<Reaction> data, response status code and response headers
    def issue_get_issue_reactions_with_http_info(owner, repo, index, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IssueApi.issue_get_issue_reactions ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling IssueApi.issue_get_issue_reactions"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling IssueApi.issue_get_issue_reactions"
      end
      # verify the required parameter 'index' is set
      if @api_client.config.client_side_validation && index.nil?
        fail ArgumentError, "Missing the required parameter 'index' when calling IssueApi.issue_get_issue_reactions"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/issues/{index}/reactions'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'index' + '}', CGI.escape(index.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Reaction>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token']

      new_options = opts.merge(
        :operation => :"IssueApi.issue_get_issue_reactions",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IssueApi#issue_get_issue_reactions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a single label
    # @param owner [String] owner of the repo
    # @param repo [String] name of the repo
    # @param id [Integer] id of the label to get
    # @param [Hash] opts the optional parameters
    # @return [Label]
    def issue_get_label(owner, repo, id, opts = {})
      data, _status_code, _headers = issue_get_label_with_http_info(owner, repo, id, opts)
      data
    end

    # Get a single label
    # @param owner [String] owner of the repo
    # @param repo [String] name of the repo
    # @param id [Integer] id of the label to get
    # @param [Hash] opts the optional parameters
    # @return [Array<(Label, Integer, Hash)>] Label data, response status code and response headers
    def issue_get_label_with_http_info(owner, repo, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IssueApi.issue_get_label ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling IssueApi.issue_get_label"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling IssueApi.issue_get_label"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling IssueApi.issue_get_label"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/labels/{id}'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Label'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token']

      new_options = opts.merge(
        :operation => :"IssueApi.issue_get_label",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IssueApi#issue_get_label\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get an issue's labels
    # @param owner [String] owner of the repo
    # @param repo [String] name of the repo
    # @param index [Integer] index of the issue
    # @param [Hash] opts the optional parameters
    # @return [Array<Label>]
    def issue_get_labels(owner, repo, index, opts = {})
      data, _status_code, _headers = issue_get_labels_with_http_info(owner, repo, index, opts)
      data
    end

    # Get an issue&#39;s labels
    # @param owner [String] owner of the repo
    # @param repo [String] name of the repo
    # @param index [Integer] index of the issue
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Label>, Integer, Hash)>] Array<Label> data, response status code and response headers
    def issue_get_labels_with_http_info(owner, repo, index, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IssueApi.issue_get_labels ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling IssueApi.issue_get_labels"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling IssueApi.issue_get_labels"
      end
      # verify the required parameter 'index' is set
      if @api_client.config.client_side_validation && index.nil?
        fail ArgumentError, "Missing the required parameter 'index' when calling IssueApi.issue_get_labels"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/issues/{index}/labels'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'index' + '}', CGI.escape(index.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Label>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token']

      new_options = opts.merge(
        :operation => :"IssueApi.issue_get_labels",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IssueApi#issue_get_labels\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a milestone
    # @param owner [String] owner of the repo
    # @param repo [String] name of the repo
    # @param id [String] the milestone to get, identified by ID and if not available by name
    # @param [Hash] opts the optional parameters
    # @return [Milestone]
    def issue_get_milestone(owner, repo, id, opts = {})
      data, _status_code, _headers = issue_get_milestone_with_http_info(owner, repo, id, opts)
      data
    end

    # Get a milestone
    # @param owner [String] owner of the repo
    # @param repo [String] name of the repo
    # @param id [String] the milestone to get, identified by ID and if not available by name
    # @param [Hash] opts the optional parameters
    # @return [Array<(Milestone, Integer, Hash)>] Milestone data, response status code and response headers
    def issue_get_milestone_with_http_info(owner, repo, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IssueApi.issue_get_milestone ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling IssueApi.issue_get_milestone"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling IssueApi.issue_get_milestone"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling IssueApi.issue_get_milestone"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/milestones/{id}'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Milestone'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token']

      new_options = opts.merge(
        :operation => :"IssueApi.issue_get_milestone",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IssueApi#issue_get_milestone\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all of a repository's opened milestones
    # @param owner [String] owner of the repo
    # @param repo [String] name of the repo
    # @param [Hash] opts the optional parameters
    # @option opts [String] :state Milestone state, Recognised values are open, closed and all. Defaults to \&quot;open\&quot;
    # @option opts [String] :name filter by milestone name
    # @option opts [Integer] :page page number of results to return (1-based)
    # @option opts [Integer] :limit page size of results
    # @return [Array<Milestone>]
    def issue_get_milestones_list(owner, repo, opts = {})
      data, _status_code, _headers = issue_get_milestones_list_with_http_info(owner, repo, opts)
      data
    end

    # Get all of a repository&#39;s opened milestones
    # @param owner [String] owner of the repo
    # @param repo [String] name of the repo
    # @param [Hash] opts the optional parameters
    # @option opts [String] :state Milestone state, Recognised values are open, closed and all. Defaults to \&quot;open\&quot;
    # @option opts [String] :name filter by milestone name
    # @option opts [Integer] :page page number of results to return (1-based)
    # @option opts [Integer] :limit page size of results
    # @return [Array<(Array<Milestone>, Integer, Hash)>] Array<Milestone> data, response status code and response headers
    def issue_get_milestones_list_with_http_info(owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IssueApi.issue_get_milestones_list ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling IssueApi.issue_get_milestones_list"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling IssueApi.issue_get_milestones_list"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/milestones'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'state'] = opts[:'state'] if !opts[:'state'].nil?
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Milestone>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token']

      new_options = opts.merge(
        :operation => :"IssueApi.issue_get_milestones_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IssueApi#issue_get_milestones_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List all comments in a repository
    # @param owner [String] owner of the repo
    # @param repo [String] name of the repo
    # @param [Hash] opts the optional parameters
    # @option opts [Time] :since if provided, only comments updated since the provided time are returned.
    # @option opts [Time] :before if provided, only comments updated before the provided time are returned.
    # @option opts [Integer] :page page number of results to return (1-based)
    # @option opts [Integer] :limit page size of results
    # @return [Array<Comment>]
    def issue_get_repo_comments(owner, repo, opts = {})
      data, _status_code, _headers = issue_get_repo_comments_with_http_info(owner, repo, opts)
      data
    end

    # List all comments in a repository
    # @param owner [String] owner of the repo
    # @param repo [String] name of the repo
    # @param [Hash] opts the optional parameters
    # @option opts [Time] :since if provided, only comments updated since the provided time are returned.
    # @option opts [Time] :before if provided, only comments updated before the provided time are returned.
    # @option opts [Integer] :page page number of results to return (1-based)
    # @option opts [Integer] :limit page size of results
    # @return [Array<(Array<Comment>, Integer, Hash)>] Array<Comment> data, response status code and response headers
    def issue_get_repo_comments_with_http_info(owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IssueApi.issue_get_repo_comments ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling IssueApi.issue_get_repo_comments"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling IssueApi.issue_get_repo_comments"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/issues/comments'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'since'] = opts[:'since'] if !opts[:'since'].nil?
      query_params[:'before'] = opts[:'before'] if !opts[:'before'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Comment>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token']

      new_options = opts.merge(
        :operation => :"IssueApi.issue_get_repo_comments",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IssueApi#issue_get_repo_comments\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List a repository's issues
    # @param owner [String] owner of the repo
    # @param repo [String] name of the repo
    # @param [Hash] opts the optional parameters
    # @option opts [String] :state whether issue is open or closed
    # @option opts [String] :labels comma separated list of labels. Fetch only issues that have any of this labels. Non existent labels are discarded
    # @option opts [String] :q search string
    # @option opts [String] :type filter by type (issues / pulls) if set
    # @option opts [String] :milestones comma separated list of milestone names or ids. It uses names and fall back to ids. Fetch only issues that have any of this milestones. Non existent milestones are discarded
    # @option opts [Time] :since Only show items updated after the given time. This is a timestamp in RFC 3339 format
    # @option opts [Time] :before Only show items updated before the given time. This is a timestamp in RFC 3339 format
    # @option opts [String] :created_by Only show items which were created by the the given user
    # @option opts [String] :assigned_by Only show items for which the given user is assigned
    # @option opts [String] :mentioned_by Only show items in which the given user was mentioned
    # @option opts [Integer] :page page number of results to return (1-based)
    # @option opts [Integer] :limit page size of results
    # @return [Array<Issue>]
    def issue_list_issues(owner, repo, opts = {})
      data, _status_code, _headers = issue_list_issues_with_http_info(owner, repo, opts)
      data
    end

    # List a repository&#39;s issues
    # @param owner [String] owner of the repo
    # @param repo [String] name of the repo
    # @param [Hash] opts the optional parameters
    # @option opts [String] :state whether issue is open or closed
    # @option opts [String] :labels comma separated list of labels. Fetch only issues that have any of this labels. Non existent labels are discarded
    # @option opts [String] :q search string
    # @option opts [String] :type filter by type (issues / pulls) if set
    # @option opts [String] :milestones comma separated list of milestone names or ids. It uses names and fall back to ids. Fetch only issues that have any of this milestones. Non existent milestones are discarded
    # @option opts [Time] :since Only show items updated after the given time. This is a timestamp in RFC 3339 format
    # @option opts [Time] :before Only show items updated before the given time. This is a timestamp in RFC 3339 format
    # @option opts [String] :created_by Only show items which were created by the the given user
    # @option opts [String] :assigned_by Only show items for which the given user is assigned
    # @option opts [String] :mentioned_by Only show items in which the given user was mentioned
    # @option opts [Integer] :page page number of results to return (1-based)
    # @option opts [Integer] :limit page size of results
    # @return [Array<(Array<Issue>, Integer, Hash)>] Array<Issue> data, response status code and response headers
    def issue_list_issues_with_http_info(owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IssueApi.issue_list_issues ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling IssueApi.issue_list_issues"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling IssueApi.issue_list_issues"
      end
      allowable_values = ["closed", "open", "all"]
      if @api_client.config.client_side_validation && opts[:'state'] && !allowable_values.include?(opts[:'state'])
        fail ArgumentError, "invalid value for \"state\", must be one of #{allowable_values}"
      end
      allowable_values = ["issues", "pulls"]
      if @api_client.config.client_side_validation && opts[:'type'] && !allowable_values.include?(opts[:'type'])
        fail ArgumentError, "invalid value for \"type\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/issues'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'state'] = opts[:'state'] if !opts[:'state'].nil?
      query_params[:'labels'] = opts[:'labels'] if !opts[:'labels'].nil?
      query_params[:'q'] = opts[:'q'] if !opts[:'q'].nil?
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?
      query_params[:'milestones'] = opts[:'milestones'] if !opts[:'milestones'].nil?
      query_params[:'since'] = opts[:'since'] if !opts[:'since'].nil?
      query_params[:'before'] = opts[:'before'] if !opts[:'before'].nil?
      query_params[:'created_by'] = opts[:'created_by'] if !opts[:'created_by'].nil?
      query_params[:'assigned_by'] = opts[:'assigned_by'] if !opts[:'assigned_by'].nil?
      query_params[:'mentioned_by'] = opts[:'mentioned_by'] if !opts[:'mentioned_by'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Issue>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token']

      new_options = opts.merge(
        :operation => :"IssueApi.issue_list_issues",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IssueApi#issue_list_issues\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all of a repository's labels
    # @param owner [String] owner of the repo
    # @param repo [String] name of the repo
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page page number of results to return (1-based)
    # @option opts [Integer] :limit page size of results
    # @return [Array<Label>]
    def issue_list_labels(owner, repo, opts = {})
      data, _status_code, _headers = issue_list_labels_with_http_info(owner, repo, opts)
      data
    end

    # Get all of a repository&#39;s labels
    # @param owner [String] owner of the repo
    # @param repo [String] name of the repo
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page page number of results to return (1-based)
    # @option opts [Integer] :limit page size of results
    # @return [Array<(Array<Label>, Integer, Hash)>] Array<Label> data, response status code and response headers
    def issue_list_labels_with_http_info(owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IssueApi.issue_list_labels ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling IssueApi.issue_list_labels"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling IssueApi.issue_list_labels"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/labels'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Label>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token']

      new_options = opts.merge(
        :operation => :"IssueApi.issue_list_labels",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IssueApi#issue_list_labels\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add a reaction to a comment of an issue
    # @param owner [String] owner of the repo
    # @param repo [String] name of the repo
    # @param id [Integer] id of the comment to edit
    # @param [Hash] opts the optional parameters
    # @option opts [EditReactionOption] :content 
    # @return [Reaction]
    def issue_post_comment_reaction(owner, repo, id, opts = {})
      data, _status_code, _headers = issue_post_comment_reaction_with_http_info(owner, repo, id, opts)
      data
    end

    # Add a reaction to a comment of an issue
    # @param owner [String] owner of the repo
    # @param repo [String] name of the repo
    # @param id [Integer] id of the comment to edit
    # @param [Hash] opts the optional parameters
    # @option opts [EditReactionOption] :content 
    # @return [Array<(Reaction, Integer, Hash)>] Reaction data, response status code and response headers
    def issue_post_comment_reaction_with_http_info(owner, repo, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IssueApi.issue_post_comment_reaction ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling IssueApi.issue_post_comment_reaction"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling IssueApi.issue_post_comment_reaction"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling IssueApi.issue_post_comment_reaction"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/issues/comments/{id}/reactions'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'content'])

      # return_type
      return_type = opts[:debug_return_type] || 'Reaction'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token']

      new_options = opts.merge(
        :operation => :"IssueApi.issue_post_comment_reaction",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IssueApi#issue_post_comment_reaction\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add a reaction to an issue
    # @param owner [String] owner of the repo
    # @param repo [String] name of the repo
    # @param index [Integer] index of the issue
    # @param [Hash] opts the optional parameters
    # @option opts [EditReactionOption] :content 
    # @return [Reaction]
    def issue_post_issue_reaction(owner, repo, index, opts = {})
      data, _status_code, _headers = issue_post_issue_reaction_with_http_info(owner, repo, index, opts)
      data
    end

    # Add a reaction to an issue
    # @param owner [String] owner of the repo
    # @param repo [String] name of the repo
    # @param index [Integer] index of the issue
    # @param [Hash] opts the optional parameters
    # @option opts [EditReactionOption] :content 
    # @return [Array<(Reaction, Integer, Hash)>] Reaction data, response status code and response headers
    def issue_post_issue_reaction_with_http_info(owner, repo, index, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IssueApi.issue_post_issue_reaction ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling IssueApi.issue_post_issue_reaction"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling IssueApi.issue_post_issue_reaction"
      end
      # verify the required parameter 'index' is set
      if @api_client.config.client_side_validation && index.nil?
        fail ArgumentError, "Missing the required parameter 'index' when calling IssueApi.issue_post_issue_reaction"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/issues/{index}/reactions'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'index' + '}', CGI.escape(index.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'content'])

      # return_type
      return_type = opts[:debug_return_type] || 'Reaction'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token']

      new_options = opts.merge(
        :operation => :"IssueApi.issue_post_issue_reaction",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IssueApi#issue_post_issue_reaction\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove a label from an issue
    # @param owner [String] owner of the repo
    # @param repo [String] name of the repo
    # @param index [Integer] index of the issue
    # @param id [Integer] id of the label to remove
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def issue_remove_label(owner, repo, index, id, opts = {})
      issue_remove_label_with_http_info(owner, repo, index, id, opts)
      nil
    end

    # Remove a label from an issue
    # @param owner [String] owner of the repo
    # @param repo [String] name of the repo
    # @param index [Integer] index of the issue
    # @param id [Integer] id of the label to remove
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def issue_remove_label_with_http_info(owner, repo, index, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IssueApi.issue_remove_label ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling IssueApi.issue_remove_label"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling IssueApi.issue_remove_label"
      end
      # verify the required parameter 'index' is set
      if @api_client.config.client_side_validation && index.nil?
        fail ArgumentError, "Missing the required parameter 'index' when calling IssueApi.issue_remove_label"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling IssueApi.issue_remove_label"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/issues/{index}/labels/{id}'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'index' + '}', CGI.escape(index.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token']

      new_options = opts.merge(
        :operation => :"IssueApi.issue_remove_label",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IssueApi#issue_remove_label\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Replace an issue's labels
    # @param owner [String] owner of the repo
    # @param repo [String] name of the repo
    # @param index [Integer] index of the issue
    # @param [Hash] opts the optional parameters
    # @option opts [IssueLabelsOption] :body 
    # @return [Array<Label>]
    def issue_replace_labels(owner, repo, index, opts = {})
      data, _status_code, _headers = issue_replace_labels_with_http_info(owner, repo, index, opts)
      data
    end

    # Replace an issue&#39;s labels
    # @param owner [String] owner of the repo
    # @param repo [String] name of the repo
    # @param index [Integer] index of the issue
    # @param [Hash] opts the optional parameters
    # @option opts [IssueLabelsOption] :body 
    # @return [Array<(Array<Label>, Integer, Hash)>] Array<Label> data, response status code and response headers
    def issue_replace_labels_with_http_info(owner, repo, index, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IssueApi.issue_replace_labels ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling IssueApi.issue_replace_labels"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling IssueApi.issue_replace_labels"
      end
      # verify the required parameter 'index' is set
      if @api_client.config.client_side_validation && index.nil?
        fail ArgumentError, "Missing the required parameter 'index' when calling IssueApi.issue_replace_labels"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/issues/{index}/labels'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'index' + '}', CGI.escape(index.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'body'])

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Label>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token']

      new_options = opts.merge(
        :operation => :"IssueApi.issue_replace_labels",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IssueApi#issue_replace_labels\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Reset a tracked time of an issue
    # @param owner [String] owner of the repo
    # @param repo [String] name of the repo
    # @param index [Integer] index of the issue to add tracked time to
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def issue_reset_time(owner, repo, index, opts = {})
      issue_reset_time_with_http_info(owner, repo, index, opts)
      nil
    end

    # Reset a tracked time of an issue
    # @param owner [String] owner of the repo
    # @param repo [String] name of the repo
    # @param index [Integer] index of the issue to add tracked time to
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def issue_reset_time_with_http_info(owner, repo, index, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IssueApi.issue_reset_time ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling IssueApi.issue_reset_time"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling IssueApi.issue_reset_time"
      end
      # verify the required parameter 'index' is set
      if @api_client.config.client_side_validation && index.nil?
        fail ArgumentError, "Missing the required parameter 'index' when calling IssueApi.issue_reset_time"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/issues/{index}/times'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'index' + '}', CGI.escape(index.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token']

      new_options = opts.merge(
        :operation => :"IssueApi.issue_reset_time",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IssueApi#issue_reset_time\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Search for issues across the repositories that the user has access to
    # @param [Hash] opts the optional parameters
    # @option opts [String] :state whether issue is open or closed
    # @option opts [String] :labels comma separated list of labels. Fetch only issues that have any of this labels. Non existent labels are discarded
    # @option opts [String] :milestones comma separated list of milestone names. Fetch only issues that have any of this milestones. Non existent are discarded
    # @option opts [String] :q search string
    # @option opts [Integer] :priority_repo_id repository to prioritize in the results
    # @option opts [String] :type filter by type (issues / pulls) if set
    # @option opts [Time] :since Only show notifications updated after the given time. This is a timestamp in RFC 3339 format
    # @option opts [Time] :before Only show notifications updated before the given time. This is a timestamp in RFC 3339 format
    # @option opts [Boolean] :assigned filter (issues / pulls) assigned to you, default is false
    # @option opts [Boolean] :created filter (issues / pulls) created by you, default is false
    # @option opts [Boolean] :mentioned filter (issues / pulls) mentioning you, default is false
    # @option opts [Boolean] :review_requested filter pulls requesting your review, default is false
    # @option opts [String] :owner filter by owner
    # @option opts [String] :team filter by team (requires organization owner parameter to be provided)
    # @option opts [Integer] :page page number of results to return (1-based)
    # @option opts [Integer] :limit page size of results
    # @return [Array<Issue>]
    def issue_search_issues(opts = {})
      data, _status_code, _headers = issue_search_issues_with_http_info(opts)
      data
    end

    # Search for issues across the repositories that the user has access to
    # @param [Hash] opts the optional parameters
    # @option opts [String] :state whether issue is open or closed
    # @option opts [String] :labels comma separated list of labels. Fetch only issues that have any of this labels. Non existent labels are discarded
    # @option opts [String] :milestones comma separated list of milestone names. Fetch only issues that have any of this milestones. Non existent are discarded
    # @option opts [String] :q search string
    # @option opts [Integer] :priority_repo_id repository to prioritize in the results
    # @option opts [String] :type filter by type (issues / pulls) if set
    # @option opts [Time] :since Only show notifications updated after the given time. This is a timestamp in RFC 3339 format
    # @option opts [Time] :before Only show notifications updated before the given time. This is a timestamp in RFC 3339 format
    # @option opts [Boolean] :assigned filter (issues / pulls) assigned to you, default is false
    # @option opts [Boolean] :created filter (issues / pulls) created by you, default is false
    # @option opts [Boolean] :mentioned filter (issues / pulls) mentioning you, default is false
    # @option opts [Boolean] :review_requested filter pulls requesting your review, default is false
    # @option opts [String] :owner filter by owner
    # @option opts [String] :team filter by team (requires organization owner parameter to be provided)
    # @option opts [Integer] :page page number of results to return (1-based)
    # @option opts [Integer] :limit page size of results
    # @return [Array<(Array<Issue>, Integer, Hash)>] Array<Issue> data, response status code and response headers
    def issue_search_issues_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IssueApi.issue_search_issues ...'
      end
      # resource path
      local_var_path = '/repos/issues/search'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'state'] = opts[:'state'] if !opts[:'state'].nil?
      query_params[:'labels'] = opts[:'labels'] if !opts[:'labels'].nil?
      query_params[:'milestones'] = opts[:'milestones'] if !opts[:'milestones'].nil?
      query_params[:'q'] = opts[:'q'] if !opts[:'q'].nil?
      query_params[:'priority_repo_id'] = opts[:'priority_repo_id'] if !opts[:'priority_repo_id'].nil?
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?
      query_params[:'since'] = opts[:'since'] if !opts[:'since'].nil?
      query_params[:'before'] = opts[:'before'] if !opts[:'before'].nil?
      query_params[:'assigned'] = opts[:'assigned'] if !opts[:'assigned'].nil?
      query_params[:'created'] = opts[:'created'] if !opts[:'created'].nil?
      query_params[:'mentioned'] = opts[:'mentioned'] if !opts[:'mentioned'].nil?
      query_params[:'review_requested'] = opts[:'review_requested'] if !opts[:'review_requested'].nil?
      query_params[:'owner'] = opts[:'owner'] if !opts[:'owner'].nil?
      query_params[:'team'] = opts[:'team'] if !opts[:'team'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Issue>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token']

      new_options = opts.merge(
        :operation => :"IssueApi.issue_search_issues",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IssueApi#issue_search_issues\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Start stopwatch on an issue.
    # @param owner [String] owner of the repo
    # @param repo [String] name of the repo
    # @param index [Integer] index of the issue to create the stopwatch on
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def issue_start_stop_watch(owner, repo, index, opts = {})
      issue_start_stop_watch_with_http_info(owner, repo, index, opts)
      nil
    end

    # Start stopwatch on an issue.
    # @param owner [String] owner of the repo
    # @param repo [String] name of the repo
    # @param index [Integer] index of the issue to create the stopwatch on
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def issue_start_stop_watch_with_http_info(owner, repo, index, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IssueApi.issue_start_stop_watch ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling IssueApi.issue_start_stop_watch"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling IssueApi.issue_start_stop_watch"
      end
      # verify the required parameter 'index' is set
      if @api_client.config.client_side_validation && index.nil?
        fail ArgumentError, "Missing the required parameter 'index' when calling IssueApi.issue_start_stop_watch"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/issues/{index}/stopwatch/start'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'index' + '}', CGI.escape(index.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token']

      new_options = opts.merge(
        :operation => :"IssueApi.issue_start_stop_watch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IssueApi#issue_start_stop_watch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Stop an issue's existing stopwatch.
    # @param owner [String] owner of the repo
    # @param repo [String] name of the repo
    # @param index [Integer] index of the issue to stop the stopwatch on
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def issue_stop_stop_watch(owner, repo, index, opts = {})
      issue_stop_stop_watch_with_http_info(owner, repo, index, opts)
      nil
    end

    # Stop an issue&#39;s existing stopwatch.
    # @param owner [String] owner of the repo
    # @param repo [String] name of the repo
    # @param index [Integer] index of the issue to stop the stopwatch on
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def issue_stop_stop_watch_with_http_info(owner, repo, index, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IssueApi.issue_stop_stop_watch ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling IssueApi.issue_stop_stop_watch"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling IssueApi.issue_stop_stop_watch"
      end
      # verify the required parameter 'index' is set
      if @api_client.config.client_side_validation && index.nil?
        fail ArgumentError, "Missing the required parameter 'index' when calling IssueApi.issue_stop_stop_watch"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/issues/{index}/stopwatch/stop'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'index' + '}', CGI.escape(index.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token']

      new_options = opts.merge(
        :operation => :"IssueApi.issue_stop_stop_watch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IssueApi#issue_stop_stop_watch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get users who subscribed on an issue.
    # @param owner [String] owner of the repo
    # @param repo [String] name of the repo
    # @param index [Integer] index of the issue
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page page number of results to return (1-based)
    # @option opts [Integer] :limit page size of results
    # @return [Array<User>]
    def issue_subscriptions(owner, repo, index, opts = {})
      data, _status_code, _headers = issue_subscriptions_with_http_info(owner, repo, index, opts)
      data
    end

    # Get users who subscribed on an issue.
    # @param owner [String] owner of the repo
    # @param repo [String] name of the repo
    # @param index [Integer] index of the issue
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page page number of results to return (1-based)
    # @option opts [Integer] :limit page size of results
    # @return [Array<(Array<User>, Integer, Hash)>] Array<User> data, response status code and response headers
    def issue_subscriptions_with_http_info(owner, repo, index, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IssueApi.issue_subscriptions ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling IssueApi.issue_subscriptions"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling IssueApi.issue_subscriptions"
      end
      # verify the required parameter 'index' is set
      if @api_client.config.client_side_validation && index.nil?
        fail ArgumentError, "Missing the required parameter 'index' when calling IssueApi.issue_subscriptions"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/issues/{index}/subscriptions'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'index' + '}', CGI.escape(index.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<User>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token']

      new_options = opts.merge(
        :operation => :"IssueApi.issue_subscriptions",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IssueApi#issue_subscriptions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List an issue's tracked times
    # @param owner [String] owner of the repo
    # @param repo [String] name of the repo
    # @param index [Integer] index of the issue
    # @param [Hash] opts the optional parameters
    # @option opts [String] :user optional filter by user (available for issue managers)
    # @option opts [Time] :since Only show times updated after the given time. This is a timestamp in RFC 3339 format
    # @option opts [Time] :before Only show times updated before the given time. This is a timestamp in RFC 3339 format
    # @option opts [Integer] :page page number of results to return (1-based)
    # @option opts [Integer] :limit page size of results
    # @return [Array<TrackedTime>]
    def issue_tracked_times(owner, repo, index, opts = {})
      data, _status_code, _headers = issue_tracked_times_with_http_info(owner, repo, index, opts)
      data
    end

    # List an issue&#39;s tracked times
    # @param owner [String] owner of the repo
    # @param repo [String] name of the repo
    # @param index [Integer] index of the issue
    # @param [Hash] opts the optional parameters
    # @option opts [String] :user optional filter by user (available for issue managers)
    # @option opts [Time] :since Only show times updated after the given time. This is a timestamp in RFC 3339 format
    # @option opts [Time] :before Only show times updated before the given time. This is a timestamp in RFC 3339 format
    # @option opts [Integer] :page page number of results to return (1-based)
    # @option opts [Integer] :limit page size of results
    # @return [Array<(Array<TrackedTime>, Integer, Hash)>] Array<TrackedTime> data, response status code and response headers
    def issue_tracked_times_with_http_info(owner, repo, index, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IssueApi.issue_tracked_times ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling IssueApi.issue_tracked_times"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling IssueApi.issue_tracked_times"
      end
      # verify the required parameter 'index' is set
      if @api_client.config.client_side_validation && index.nil?
        fail ArgumentError, "Missing the required parameter 'index' when calling IssueApi.issue_tracked_times"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/issues/{index}/times'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'index' + '}', CGI.escape(index.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'user'] = opts[:'user'] if !opts[:'user'].nil?
      query_params[:'since'] = opts[:'since'] if !opts[:'since'].nil?
      query_params[:'before'] = opts[:'before'] if !opts[:'before'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<TrackedTime>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token']

      new_options = opts.merge(
        :operation => :"IssueApi.issue_tracked_times",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IssueApi#issue_tracked_times\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
